
PhonosynthAtmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001f68  00001ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b2  00800116  00800116  00002012  2**0
                  ALLOC
  3 .stab         000033a8  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b67  00000000  00000000  000053bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005f23  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000320  00000000  00000000  00005f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000040e6  00000000  00000000  00006272  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000155e  00000000  00000000  0000a358  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002ddb  00000000  00000000  0000b8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000844  00000000  00000000  0000e694  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000a506  00000000  00000000  0000eed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ef7  00000000  00000000  000193de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000290  00000000  00000000  0001b2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000437d  00000000  00000000  0001b565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#endif
}


void FrequencyTimer2::setPeriod(unsigned long period)
{
       0:	61 c1       	rjmp	.+706    	; 0x2c4 <__ctors_end>
       2:	85 c1       	rjmp	.+778    	; 0x30e <__bad_interrupt>
	uint8_t pre, top;

	if ( period == 0) period = 1;
       4:	84 c1       	rjmp	.+776    	; 0x30e <__bad_interrupt>
       6:	83 c1       	rjmp	.+774    	; 0x30e <__bad_interrupt>
       8:	82 c1       	rjmp	.+772    	; 0x30e <__bad_interrupt>
       a:	81 c1       	rjmp	.+770    	; 0x30e <__bad_interrupt>
       c:	80 c1       	rjmp	.+768    	; 0x30e <__bad_interrupt>
       e:	7f c1       	rjmp	.+766    	; 0x30e <__bad_interrupt>
      10:	7e c1       	rjmp	.+764    	; 0x30e <__bad_interrupt>
      12:	7d c1       	rjmp	.+762    	; 0x30e <__bad_interrupt>
      14:	7c c1       	rjmp	.+760    	; 0x30e <__bad_interrupt>
	period *= clockCyclesPerMicrosecond();
      16:	7b c1       	rjmp	.+758    	; 0x30e <__bad_interrupt>
      18:	7a c1       	rjmp	.+756    	; 0x30e <__bad_interrupt>
      1a:	b9 c1       	rjmp	.+882    	; 0x38e <__vector_13>
      1c:	44 c4       	rjmp	.+2184   	; 0x8a6 <__vector_14>
      1e:	77 c1       	rjmp	.+750    	; 0x30e <__bad_interrupt>
      20:	d1 cc       	rjmp	.-1630   	; 0xfffff9c4 <__eeprom_end+0xff7ef9c4>
      22:	75 c1       	rjmp	.+746    	; 0x30e <__bad_interrupt>
      24:	74 c1       	rjmp	.+744    	; 0x30e <__bad_interrupt>
      26:	73 c1       	rjmp	.+742    	; 0x30e <__bad_interrupt>
	period /= 2;            // we work with half-cycles before the toggle
      28:	72 c1       	rjmp	.+740    	; 0x30e <__bad_interrupt>
      2a:	41 c3       	rjmp	.+1666   	; 0x6ae <__vector_21>
      2c:	70 c1       	rjmp	.+736    	; 0x30e <__bad_interrupt>
      2e:	6f c1       	rjmp	.+734    	; 0x30e <__bad_interrupt>
      30:	6e c1       	rjmp	.+732    	; 0x30e <__bad_interrupt>
      32:	6d c1       	rjmp	.+730    	; 0x30e <__bad_interrupt>

#if defined(TCCR2A) || defined(TCCR2)
	if ( period <= 256) {
      34:	ad c4       	rjmp	.+2394   	; 0x990 <_Z11getByteBeath+0x40>
      36:	b0 c4       	rjmp	.+2400   	; 0x998 <_Z11getByteBeath+0x48>
      38:	07 c5       	rjmp	.+2574   	; 0xa48 <_Z11getByteBeath+0xf8>
      3a:	3d c5       	rjmp	.+2682   	; 0xab6 <_Z11getByteBeath+0x166>
      3c:	84 c5       	rjmp	.+2824   	; 0xb46 <_Z11getByteBeath+0x1f6>
      3e:	c1 c5       	rjmp	.+2946   	; 0xbc2 <_Z11getByteBeath+0x272>
		pre = 1;
		top = period-1;
      40:	0d c6       	rjmp	.+3098   	; 0xc5c <_Z11getByteBeath+0x30c>
      42:	86 c6       	rjmp	.+3340   	; 0xd50 <_Z11getByteBeath+0x400>
	period *= clockCyclesPerMicrosecond();
	period /= 2;            // we work with half-cycles before the toggle

#if defined(TCCR2A) || defined(TCCR2)
	if ( period <= 256) {
		pre = 1;
      44:	bd c6       	rjmp	.+3450   	; 0xdc0 <_Z11getByteBeath+0x470>
      46:	f0 c6       	rjmp	.+3552   	; 0xe28 <_Z11getByteBeath+0x4d8>
		top = period-1;
	} else if ( period <= 256L*8) { // this for AUDIO_RATE 16384, pre=2 is a bitfield 010 which means prescaler = 8
      48:	48 c7       	rjmp	.+3728   	; 0xeda <_Z11getByteBeath+0x58a>
      4a:	7b c7       	rjmp	.+3830   	; 0xf42 <_Z11getByteBeath+0x5f2>
      4c:	bd c7       	rjmp	.+3962   	; 0xfc8 <_Z11getByteBeath+0x678>
      4e:	ff c7       	rjmp	.+4094   	; 0x104e <_Z11getByteBeath+0x6fe>
      50:	45 c8       	rjmp	.-3958   	; 0xfffff0dc <__eeprom_end+0xff7ef0dc>
      52:	8b c8       	rjmp	.-3818   	; 0xfffff16a <__eeprom_end+0xff7ef16a>
		pre = 2;
		top = period/8-1;
      54:	d7 c8       	rjmp	.-3666   	; 0xfffff204 <__eeprom_end+0xff7ef204>
      56:	f2 c8       	rjmp	.-3612   	; 0xfffff23c <__eeprom_end+0xff7ef23c>
      58:	0f c9       	rjmp	.-3554   	; 0xfffff278 <__eeprom_end+0xff7ef278>

0000005a <_ZL8preScale>:
      5a:	01 00 00 02 00 00 03 00 04 00 05                    ...........

00000065 <_ZL11SAW256_DATA>:
#if defined(TCCR2A) || defined(TCCR2)
	if ( period <= 256) {
		pre = 1;
		top = period-1;
	} else if ( period <= 256L*8) { // this for AUDIO_RATE 16384, pre=2 is a bitfield 010 which means prescaler = 8
		pre = 2;
      65:	80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f     ................
		top = period/8-1;
	} else if ( period <= 256L*32) {
		pre = 3;
		top = period/32-1;
      75:	90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f     ................
		top = period-1;
	} else if ( period <= 256L*8) { // this for AUDIO_RATE 16384, pre=2 is a bitfield 010 which means prescaler = 8
		pre = 2;
		top = period/8-1;
	} else if ( period <= 256L*32) {
		pre = 3;
      85:	a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af     ................
		top = period/32-1;
	} else if ( period <= 256L*64) {
		pre = 4;
		top = period/64-1;
      95:	b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf     ................
		top = period/8-1;
	} else if ( period <= 256L*32) {
		pre = 3;
		top = period/32-1;
	} else if ( period <= 256L*64) {
		pre = 4;
      a5:	c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf     ................
		top = period/64-1;
	} else if ( period <= 256L*128) {
		pre = 5;
		top = period/128-1;
      b5:	d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df     ................
	} else if ( period <= 256L*256) {
      c5:	e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef     ................
		pre = 6;
		top = period/256-1;
	} else if ( period <= 256L*1024) {
      d5:	f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff     ................
		pre = 7;
		top = period/1024-1;
      e5:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
	//top = period/8-1;
#endif

#if defined(TCCR2A)
	TCCR2B = 0;
	TCCR2A = 0;
      f5:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	TCNT2 = 0;
#if defined(ASSR) && defined(AS2)
	ASSR &= ~_BV(AS2);    // use clock, not T2 pin
#endif
	OCR2A = top;
     105:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
	//Clear Timer on Compare Match (CTC) mode
	TCCR2A = (_BV(WGM21) | ( FrequencyTimer2::enabled ? _BV(COM2A0) : 0));
     115:	30 31 32 33 34 35 35 37 38 39 3a 3b 3c 3d 3e 3f     0123455789:;<=>?
     125:	40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f     @ABCDEFGHIJKLMNO
     135:	50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f     PQRSTUVWXYZ[\]^_
     145:	60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f     `abcdefghijklmno
     155:	70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f     pqrstuvwxyz{|}~.

00000165 <_ZL11SIN256_DATA>:
     165:	ff 03 06 09 0c 0f 12 15 18 1c 1f 22 25 28 2b 2e     ..........."%(+.
     175:	30 33 36 39 3c 3f 41 44 47 49 4c 4e 51 53 55 58     0369<?ADGILNQSUX
     185:	5a 5c 5e 60 62 64 66 68 6a 6c 6d 6f 70 72 73 75     Z\^`bdfhjlmoprsu
     195:	76 77 78 79 7a 7b 7c 7c 7d 7e 7e 7f 7f 7f 7f 7f     vwxyz{||}~~.....
     1a5:	7f 7f 7f 7f 7f 7f 7e 7e 7d 7c 7c 7b 7a 79 78 77     ......~~}||{zyxw
     1b5:	76 75 73 72 70 6f 6d 6c 6a 68 66 64 62 60 5e 5c     vusrpomljhfdb`^\
     1c5:	5a 58 55 53 51 4e 4c 49 47 44 41 3f 3c 39 36 33     ZXUSQNLIGDA?<963
     1d5:	30 2e 2b 28 25 22 1f 1c 18 15 12 0f 0c 09 06 03     0.+(%"..........
     1e5:	00 fc f9 f6 f3 f0 ed ea e7 e3 e0 dd da d7 d4 d1     ................
     1f5:	cf cc c9 c6 c3 c0 be bb b8 b6 b3 b1 ae ac aa a7     ................
     205:	a5 a3 a1 9f 9d 9b 99 97 95 93 92 90 8f 8d 8c 8a     ................
     215:	89 88 87 86 85 84 83 83 82 81 81 80 80 80 80 80     ................
     225:	80 80 80 80 80 80 81 81 82 83 83 84 85 86 87 88     ................
     235:	89 8a 8c 8d 8f 90 92 93 95 97 99 9b 9d 9f a1 a3     ................
     245:	a5 a7 aa ac ae b1 b3 b6 b8 bb be c0 c3 c6 c9 cc     ................
     255:	cf d1 d4 d7 da dd e0 e3 e7 ea ed f0 f3 f6 f9 fc     ................

00000265 <digital_pin_to_timer_PGM>:
     265:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     275:	00 00 00 00                                         ....

00000279 <digital_pin_to_bit_mask_PGM>:
     279:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     289:	04 08 10 20                                         ... 

0000028d <digital_pin_to_port_PGM>:
     28d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     29d:	03 03 03 03                                         ....

000002a1 <port_to_input_PGM>:
     2a1:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002ab <port_to_output_PGM>:
     2ab:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002b5 <port_to_mode_PGM>:
     2b5:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000002c0 <__ctors_start>:
     2c0:	86 03       	fmuls	r16, r22
     2c2:	b8 0c       	add	r11, r8

000002c4 <__ctors_end>:
     2c4:	11 24       	eor	r1, r1
     2c6:	1f be       	out	0x3f, r1	; 63
     2c8:	cf ef       	ldi	r28, 0xFF	; 255
     2ca:	d4 e0       	ldi	r29, 0x04	; 4
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	cd bf       	out	0x3d, r28	; 61

000002d0 <__do_copy_data>:
     2d0:	11 e0       	ldi	r17, 0x01	; 1
     2d2:	a0 e0       	ldi	r26, 0x00	; 0
     2d4:	b1 e0       	ldi	r27, 0x01	; 1
     2d6:	e8 e6       	ldi	r30, 0x68	; 104
     2d8:	ff e1       	ldi	r31, 0x1F	; 31
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__do_copy_data+0x10>
     2dc:	05 90       	lpm	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	a6 31       	cpi	r26, 0x16	; 22
     2e2:	b1 07       	cpc	r27, r17
     2e4:	d9 f7       	brne	.-10     	; 0x2dc <__do_copy_data+0xc>

000002e6 <__do_clear_bss>:
     2e6:	23 e0       	ldi	r18, 0x03	; 3
     2e8:	a6 e1       	ldi	r26, 0x16	; 22
     2ea:	b1 e0       	ldi	r27, 0x01	; 1
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <.do_clear_bss_start>

000002ee <.do_clear_bss_loop>:
     2ee:	1d 92       	st	X+, r1

000002f0 <.do_clear_bss_start>:
     2f0:	a8 3c       	cpi	r26, 0xC8	; 200
     2f2:	b2 07       	cpc	r27, r18
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <.do_clear_bss_loop>

000002f6 <__do_global_ctors>:
     2f6:	12 e0       	ldi	r17, 0x02	; 2
     2f8:	c4 ec       	ldi	r28, 0xC4	; 196
     2fa:	d2 e0       	ldi	r29, 0x02	; 2
     2fc:	03 c0       	rjmp	.+6      	; 0x304 <__do_global_ctors+0xe>
     2fe:	22 97       	sbiw	r28, 0x02	; 2
     300:	fe 01       	movw	r30, r28
     302:	2c de       	rcall	.-936    	; 0xffffff5c <__eeprom_end+0xff7eff5c>
     304:	c0 3c       	cpi	r28, 0xC0	; 192
     306:	d1 07       	cpc	r29, r17
     308:	d1 f7       	brne	.-12     	; 0x2fe <__do_global_ctors+0x8>
     30a:	53 db       	rcall	.-2394   	; 0xfffff9b2 <__eeprom_end+0xff7ef9b2>
     30c:	2b ce       	rjmp	.-938    	; 0xffffff64 <__eeprom_end+0xff7eff64>

0000030e <__bad_interrupt>:
     30e:	78 ce       	rjmp	.-784    	; 0x0 <__vectors>

00000310 <_ZL24updateControlWithAutoADCv>:

	//-----------------------------------------------------------------------------------------------------------------

	static void updateControlWithAutoADC()
	{
		updateControl();
     310:	09 d9       	rcall	.-3566   	; 0xfffff524 <__eeprom_end+0xff7ef524>
		adcStartReadCycle();
     312:	b1 c1       	rjmp	.+866    	; 0x676 <_Z17adcStartReadCyclev>

00000314 <_Z9audioHookv>:
#endif



void audioHook() // 2us excluding updateAudio()
{
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
	static unsigned long output_buffer_head = 0;
	long output_gap = output_buffer_head - output_buffer_tail; // wraps to a big number if it's negative, and will take a long time to wrap
     31c:	c0 90 1a 01 	lds	r12, 0x011A
     320:	d0 90 1b 01 	lds	r13, 0x011B
     324:	e0 90 1c 01 	lds	r14, 0x011C
     328:	f0 90 1d 01 	lds	r15, 0x011D
     32c:	80 91 16 01 	lds	r24, 0x0116
     330:	90 91 17 01 	lds	r25, 0x0117
     334:	a0 91 18 01 	lds	r26, 0x0118
     338:	b0 91 19 01 	lds	r27, 0x0119
     33c:	a7 01       	movw	r20, r14
     33e:	96 01       	movw	r18, r12
     340:	28 1b       	sub	r18, r24
     342:	39 0b       	sbc	r19, r25
     344:	4a 0b       	sbc	r20, r26
     346:	5b 0b       	sbc	r21, r27
		input_buffer_tail++;
		audio_input = input_buffer[input_buffer_tail & (BUFFER_NUM_CELLS-1)];

#else

		if(output_gap < BUFFER_NUM_CELLS) // prevent writing over cells which haven't been output yet
     348:	2f 3f       	cpi	r18, 0xFF	; 255
     34a:	31 05       	cpc	r19, r1
     34c:	41 05       	cpc	r20, r1
     34e:	51 05       	cpc	r21, r1
     350:	09 f0       	breq	.+2      	; 0x354 <_Z9audioHookv+0x40>
     352:	c4 f4       	brge	.+48     	; 0x384 <_Z9audioHookv+0x70>
		{

#endif
			output_buffer_head++;
     354:	3f ef       	ldi	r19, 0xFF	; 255
     356:	c3 1a       	sub	r12, r19
     358:	d3 0a       	sbc	r13, r19
     35a:	e3 0a       	sbc	r14, r19
     35c:	f3 0a       	sbc	r15, r19
     35e:	c0 92 1a 01 	sts	0x011A, r12
     362:	d0 92 1b 01 	sts	0x011B, r13
     366:	e0 92 1c 01 	sts	0x011C, r14
     36a:	f0 92 1d 01 	sts	0x011D, r15
			output_buffer[(unsigned char)output_buffer_head & (unsigned char)(BUFFER_NUM_CELLS-1)] = (unsigned int) (updateAudio() + AUDIO_BIAS);
     36e:	c8 d9       	rcall	.-3184   	; 0xfffff700 <__eeprom_end+0xff7ef700>
     370:	ec 2d       	mov	r30, r12
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	e2 5e       	subi	r30, 0xE2	; 226
     37a:	fe 4f       	sbci	r31, 0xFE	; 254
     37c:	8c 50       	subi	r24, 0x0C	; 12
     37e:	9f 4f       	sbci	r25, 0xFF	; 255
     380:	91 83       	std	Z+1, r25	; 0x01
     382:	80 83       	st	Z, r24
		}

	}
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	df 90       	pop	r13
     38a:	cf 90       	pop	r12
     38c:	08 95       	ret

0000038e <__vector_13>:
	}


	/* Interrupt service routine moves sound data from the output buffer to the
	Arduino output register, running at AUDIO_RATE. */
	ISR(TIMER1_OVF_vect, ISR_BLOCK) {
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	ef 93       	push	r30
     3a2:	ff 93       	push	r31

		adc_count = 0;
	    startSecondAudioADC();

#endif
		output_buffer_tail++;
     3a4:	80 91 16 01 	lds	r24, 0x0116
     3a8:	90 91 17 01 	lds	r25, 0x0117
     3ac:	a0 91 18 01 	lds	r26, 0x0118
     3b0:	b0 91 19 01 	lds	r27, 0x0119
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	a1 1d       	adc	r26, r1
     3b8:	b1 1d       	adc	r27, r1
     3ba:	80 93 16 01 	sts	0x0116, r24
     3be:	90 93 17 01 	sts	0x0117, r25
     3c2:	a0 93 18 01 	sts	0x0118, r26
     3c6:	b0 93 19 01 	sts	0x0119, r27
		AUDIO_CHANNEL_1_OUTPUT_REGISTER = output_buffer[(unsigned char)output_buffer_tail & (unsigned char)(BUFFER_NUM_CELLS-1)]; // 1us, 2.5us with longs
     3ca:	80 91 16 01 	lds	r24, 0x0116
     3ce:	90 91 17 01 	lds	r25, 0x0117
     3d2:	a0 91 18 01 	lds	r26, 0x0118
     3d6:	b0 91 19 01 	lds	r27, 0x0119
     3da:	e8 2f       	mov	r30, r24
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	e2 5e       	subi	r30, 0xE2	; 226
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	80 81       	ld	r24, Z
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	90 93 89 00 	sts	0x0089, r25
     3ee:	80 93 88 00 	sts	0x0088, r24
	}
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	bf 91       	pop	r27
     3f8:	af 91       	pop	r26
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	0f 90       	pop	r0
     400:	0f be       	out	0x3f, r0	; 63
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <_Z10startMozzii>:
		mozzi_TIMSK0 = TIMSK0;
	}


	void startMozzi(int control_rate_hz)
	{
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	ec 01       	movw	r28, r24
		setupMozziADC(); // you can use setupFastAnalogRead() with FASTER or FASTEST in setup() if desired
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	da d0       	rcall	.+436    	; 0x5ca <_Z13setupMozziADCc>
	option for Using Timer2 instead if needed. (MozziTimer2 can be re-introduced for
	that). */
	static void startControl(unsigned int control_rate_hz)
	{
		// backup pre-mozzi register values
		pre_mozzi_TCCR0A = TCCR0A;
     416:	84 b5       	in	r24, 0x24	; 36
     418:	80 93 1e 03 	sts	0x031E, r24
		pre_mozzi_TCCR0B = TCCR0B;
     41c:	85 b5       	in	r24, 0x25	; 37
     41e:	80 93 1f 03 	sts	0x031F, r24
		pre_mozzi_OCR0A = OCR0A;
     422:	87 b5       	in	r24, 0x27	; 39
     424:	80 93 20 03 	sts	0x0320, r24
		pre_mozzi_TIMSK0 = TIMSK0;
     428:	80 91 6e 00 	lds	r24, 0x006E
     42c:	80 93 21 03 	sts	0x0321, r24

		TimerZero::init(1000000/control_rate_hz,updateControlWithAutoADC); // set period, attach updateControlWithAutoADC()
     430:	9e 01       	movw	r18, r28
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	60 e4       	ldi	r22, 0x40	; 64
     438:	72 e4       	ldi	r23, 0x42	; 66
     43a:	8f e0       	ldi	r24, 0x0F	; 15
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	31 dc       	rcall	.-1950   	; 0xfffffca2 <__eeprom_end+0xff7efca2>
     440:	89 01       	movw	r16, r18
     442:	9a 01       	movw	r18, r20
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	68 e8       	ldi	r22, 0x88	; 136
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	c8 01       	movw	r24, r16
     44c:	d2 d1       	rcall	.+932    	; 0x7f2 <_ZN9TimerZero4initEjPFvvEb>
		TimerZero::start();
     44e:	25 d2       	rcall	.+1098   	; 0x89a <_ZN9TimerZero5startEv>

		// backup mozzi register values for unpausing later
		mozzi_TCCR0A = TCCR0A;
     450:	84 b5       	in	r24, 0x24	; 36
     452:	80 93 22 03 	sts	0x0322, r24
		mozzi_TCCR0B = TCCR0B;
     456:	85 b5       	in	r24, 0x25	; 37
     458:	80 93 23 03 	sts	0x0323, r24
		mozzi_OCR0A = OCR0A;
     45c:	87 b5       	in	r24, 0x27	; 39
     45e:	80 93 24 03 	sts	0x0324, r24
		mozzi_TIMSK0 = TIMSK0;
     462:	80 91 6e 00 	lds	r24, 0x006E
     466:	80 93 25 03 	sts	0x0325, r24
#endif
#endif

static void backupPreMozziTimer1(){
	// backup pre-mozzi register values for pausing later
	pre_mozzi_TCCR1A = TCCR1A;
     46a:	80 91 80 00 	lds	r24, 0x0080
     46e:	80 93 26 03 	sts	0x0326, r24
	pre_mozzi_TCCR1B = TCCR1B;
     472:	80 91 81 00 	lds	r24, 0x0081
     476:	80 93 27 03 	sts	0x0327, r24
	pre_mozzi_OCR1A = OCR1A;
     47a:	80 91 88 00 	lds	r24, 0x0088
     47e:	90 91 89 00 	lds	r25, 0x0089
     482:	80 93 28 03 	sts	0x0328, r24
	pre_mozzi_TIMSK1 = TIMSK1;
     486:	80 91 6f 00 	lds	r24, 0x006F
     48a:	80 93 29 03 	sts	0x0329, r24
#if (AUDIO_MODE == STANDARD)

	static void startAudioStandard(){
		backupPreMozziTimer1();

		pinMode(AUDIO_CHANNEL_1_PIN, OUTPUT);	// set pin to output for audio
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	89 e0       	ldi	r24, 0x09	; 9
     492:	51 db       	rcall	.-2398   	; 0xfffffb36 <__eeprom_end+0xff7efb36>
	//  Configuration
	//****************************
	void initialize(unsigned long microseconds=1000000, unsigned char mode = PHASE_FREQ_CORRECT) __attribute__((always_inline))
	{
		//TB2013
		_mode = mode;
     494:	11 e0       	ldi	r17, 0x01	; 1
     496:	10 93 47 03 	sts	0x0347, r17
		if (_mode == FAST){
			TCCR1B_PWM_MODE_BITS = _BV(WGM13) | _BV(WGM12);
			TCCR1A_PWM_MODE_BITS = _BV(WGM11);
		}else if (_mode == PHASE_FREQ_CORRECT){
			TCCR1B_PWM_MODE_BITS  = _BV(WGM13);
     49a:	80 e1       	ldi	r24, 0x10	; 16
     49c:	80 93 48 03 	sts	0x0348, r24
			TCCR1A_PWM_MODE_BITS = 0;
     4a0:	10 92 49 03 	sts	0x0349, r1
		}
		TCCR1B = TCCR1B_PWM_MODE_BITS;        // set mode as fast or phase and frequency correct pwm, stop the timer
     4a4:	80 93 81 00 	sts	0x0081, r24
		TCCR1A = TCCR1A_PWM_MODE_BITS;        // set control register A
     4a8:	10 92 80 00 	sts	0x0080, r1
		unsigned long cycles=0;
		// TB2013
		if (_mode == FAST){
			cycles = (F_CPU / 1000000) * microseconds; // adjusted for fast pwm
		}else if (_mode == PHASE_FREQ_CORRECT){
			cycles = (F_CPU / 2000000) * microseconds;
     4ac:	84 ef       	ldi	r24, 0xF4	; 244
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	a0 e0       	ldi	r26, 0x00	; 0
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
		}
		// end TB2013
		
		if (cycles < TIMER1_RESOLUTION)
		{
			clockSelectBits = _BV(CS10);
     4b4:	10 93 42 03 	sts	0x0342, r17
			pwmPeriod = cycles;
     4b8:	90 93 44 03 	sts	0x0344, r25
     4bc:	80 93 43 03 	sts	0x0343, r24
						else
						{
							clockSelectBits = _BV(CS12) | _BV(CS10);
							pwmPeriod = TIMER1_RESOLUTION - 1;
						}
		ICR1 = pwmPeriod;
     4c0:	90 93 87 00 	sts	0x0087, r25
     4c4:	80 93 86 00 	sts	0x0086, r24
		TCCR1B = TCCR1B_PWM_MODE_BITS | clockSelectBits;
     4c8:	81 e1       	ldi	r24, 0x11	; 17
     4ca:	80 93 81 00 	sts	0x0081, r24
	}
	void pwm(char pin, unsigned int duty) __attribute__((always_inline))
	{
		if (pin == TIMER1_A_PIN)
		{
			pinMode(TIMER1_A_PIN, OUTPUT);
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	89 e0       	ldi	r24, 0x09	; 9
     4d2:	31 db       	rcall	.-2462   	; 0xfffffb36 <__eeprom_end+0xff7efb36>
			TCCR1A |= _BV(COM1A1) | TCCR1A_PWM_MODE_BITS;
     4d4:	80 91 80 00 	lds	r24, 0x0080
     4d8:	90 91 49 03 	lds	r25, 0x0349
     4dc:	89 2b       	or	r24, r25
     4de:	80 68       	ori	r24, 0x80	; 128
     4e0:	80 93 80 00 	sts	0x0080, r24
	//****************************
	//  PWM outputs
	//****************************
	void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline))
	{
		unsigned long dutyCycle = pwmPeriod;
     4e4:	20 91 43 03 	lds	r18, 0x0343
     4e8:	30 91 44 03 	lds	r19, 0x0344
		dutyCycle *= duty;
     4ec:	a4 ef       	ldi	r26, 0xF4	; 244
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	f3 db       	rcall	.-2074   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
		dutyCycle >>= 10;
     4f2:	ba e0       	ldi	r27, 0x0A	; 10
     4f4:	96 95       	lsr	r25
     4f6:	87 95       	ror	r24
     4f8:	77 95       	ror	r23
     4fa:	67 95       	ror	r22
     4fc:	ba 95       	dec	r27
     4fe:	d1 f7       	brne	.-12     	; 0x4f4 <_Z10startMozzii+0xec>
		if (pin == TIMER1_A_PIN)
			OCR1A = dutyCycle;
     500:	70 93 89 00 	sts	0x0089, r23
     504:	60 93 88 00 	sts	0x0088, r22
			pinMode(TIMER1_C_PIN, OUTPUT);
			TCCR1A |= _BV(COM1C1) | TCCR1A_PWM_MODE_BITS;
		}
#endif
		setPwmDuty(pin, duty);
		TCCR1B = TCCR1B_PWM_MODE_BITS | clockSelectBits;
     508:	80 91 42 03 	lds	r24, 0x0342
     50c:	90 91 48 03 	lds	r25, 0x0348
     510:	89 2b       	or	r24, r25
     512:	80 93 81 00 	sts	0x0081, r24
		Timer1.initialize(1000000UL/AUDIO_RATE, PHASE_FREQ_CORRECT);		// set period, phase and frequency correct
		Timer1.pwm(AUDIO_CHANNEL_1_PIN, AUDIO_BIAS);		// pwm pin, 50% of Mozzi's duty cycle, ie. 0 signal
		TIMSK1 = _BV(TOIE1); 	// Overflow Interrupt Enable (when not using Timer1.attachInterrupt())
     516:	10 93 6f 00 	sts	0x006F, r17
#endif
#endif

static void backupMozziTimer1(){
	// backup mozzi register values for unpausing later
	mozzi_TCCR1A = TCCR1A;
     51a:	80 91 80 00 	lds	r24, 0x0080
     51e:	80 93 2a 03 	sts	0x032A, r24
	mozzi_TCCR1B = TCCR1B;
     522:	80 91 81 00 	lds	r24, 0x0081
     526:	80 93 2b 03 	sts	0x032B, r24
	mozzi_OCR1A = OCR1A;
     52a:	80 91 88 00 	lds	r24, 0x0088
     52e:	90 91 89 00 	lds	r25, 0x0089
     532:	80 93 2c 03 	sts	0x032C, r24
	mozzi_TIMSK1 = TIMSK1;
     536:	80 91 6f 00 	lds	r24, 0x006F
     53a:	80 93 2d 03 	sts	0x032D, r24
#if (AUDIO_MODE == STANDARD)
		startAudioStandard();
#elif (AUDIO_MODE == HIFI)
		startAudioHiFi();
#endif
	}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <_Z19setupFastAnalogReadc>:
#include "Stack.h"
//#include "mozzi_utils.h"

void setupFastAnalogRead(char speed)
{
	if (speed == FAST_ADC){ // divide by 16
     548:	81 11       	cpse	r24, r1
     54a:	09 c0       	rjmp	.+18     	; 0x55e <_Z19setupFastAnalogReadc+0x16>
		ADCSRA |= (1 << ADPS2);
     54c:	80 91 7a 00 	lds	r24, 0x007A
     550:	84 60       	ori	r24, 0x04	; 4
     552:	80 93 7a 00 	sts	0x007A, r24
		ADCSRA &= ~(1 << ADPS1);
     556:	80 91 7a 00 	lds	r24, 0x007A
     55a:	8d 7f       	andi	r24, 0xFD	; 253
     55c:	1a c0       	rjmp	.+52     	; 0x592 <_Z19setupFastAnalogReadc+0x4a>
		ADCSRA &= ~(1 << ADPS0);
	} else if(speed == FASTER_ADC){ // divide by 8
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	71 f4       	brne	.+28     	; 0x57e <_Z19setupFastAnalogReadc+0x36>
		ADCSRA &= ~(1 << ADPS2);
     562:	80 91 7a 00 	lds	r24, 0x007A
     566:	8b 7f       	andi	r24, 0xFB	; 251
     568:	80 93 7a 00 	sts	0x007A, r24
		ADCSRA |= (1 << ADPS1);
     56c:	80 91 7a 00 	lds	r24, 0x007A
     570:	82 60       	ori	r24, 0x02	; 2
     572:	80 93 7a 00 	sts	0x007A, r24
		ADCSRA |= (1 << ADPS0);
     576:	80 91 7a 00 	lds	r24, 0x007A
     57a:	81 60       	ori	r24, 0x01	; 1
     57c:	0f c0       	rjmp	.+30     	; 0x59c <_Z19setupFastAnalogReadc+0x54>
	} else if(speed == FASTEST_ADC){ // divide by 4
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	79 f4       	brne	.+30     	; 0x5a0 <_Z19setupFastAnalogReadc+0x58>
		ADCSRA &= ~(1 << ADPS2);
     582:	80 91 7a 00 	lds	r24, 0x007A
     586:	8b 7f       	andi	r24, 0xFB	; 251
     588:	80 93 7a 00 	sts	0x007A, r24
		ADCSRA |= (1 << ADPS1);
     58c:	80 91 7a 00 	lds	r24, 0x007A
     590:	82 60       	ori	r24, 0x02	; 2
     592:	80 93 7a 00 	sts	0x007A, r24
		ADCSRA &= ~(1 << ADPS0);
     596:	80 91 7a 00 	lds	r24, 0x007A
     59a:	8e 7f       	andi	r24, 0xFE	; 254
     59c:	80 93 7a 00 	sts	0x007A, r24
     5a0:	08 95       	ret

000005a2 <_Z26adcDisconnectAllDigitalInsv>:
void reconnectDigitalIn(byte channel_num){
	DIDR0 &= ~(1<<channel_num);
}


void adcDisconnectAllDigitalIns(){
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
	for (unsigned char i = 0; i<NUM_ANALOG_INPUTS; i++){
		DIDR0 |= 1<<i;
     5a6:	41 e0       	ldi	r20, 0x01	; 1
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	60 91 7e 00 	lds	r22, 0x007E
     5ae:	9a 01       	movw	r18, r20
     5b0:	08 2e       	mov	r0, r24
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <_Z26adcDisconnectAllDigitalInsv+0x14>
     5b4:	22 0f       	add	r18, r18
     5b6:	0a 94       	dec	r0
     5b8:	ea f7       	brpl	.-6      	; 0x5b4 <_Z26adcDisconnectAllDigitalInsv+0x12>
     5ba:	62 2b       	or	r22, r18
     5bc:	60 93 7e 00 	sts	0x007E, r22
     5c0:	01 96       	adiw	r24, 0x01	; 1
	DIDR0 &= ~(1<<channel_num);
}


void adcDisconnectAllDigitalIns(){
	for (unsigned char i = 0; i<NUM_ANALOG_INPUTS; i++){
     5c2:	86 30       	cpi	r24, 0x06	; 6
     5c4:	91 05       	cpc	r25, r1
     5c6:	89 f7       	brne	.-30     	; 0x5aa <_Z26adcDisconnectAllDigitalInsv+0x8>
		DIDR0 |= 1<<i;
	}
}                     
     5c8:	08 95       	ret

000005ca <_Z13setupMozziADCc>:
	ADCSRA |= (1 << ADIE);
}
*/

void setupMozziADC(char speed) {
	ADCSRA |= (1 << ADIE); // adc Enable Interrupt
     5ca:	ea e7       	ldi	r30, 0x7A	; 122
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	90 81       	ld	r25, Z
     5d0:	98 60       	ori	r25, 0x08	; 8
     5d2:	90 83       	st	Z, r25
	setupFastAnalogRead(speed);
     5d4:	b9 df       	rcall	.-142    	; 0x548 <_Z19setupFastAnalogReadc>
	adcDisconnectAllDigitalIns();
     5d6:	e5 cf       	rjmp	.-54     	; 0x5a2 <_Z26adcDisconnectAllDigitalInsv>

000005d8 <_Z18adcStartConversionh>:

	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (1 << REFS0) | (channel & 0x07);
     5d8:	87 70       	andi	r24, 0x07	; 7
     5da:	80 64       	ori	r24, 0x40	; 64
     5dc:	80 93 7c 00 	sts	0x007C, r24
// can be started here and received by another function.
void adcStartConversion(unsigned char channel) {
	adcSetChannel(channel);
#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	ADCSRA |= (1 << ADSC);
     5e0:	ea e7       	ldi	r30, 0x7A	; 122
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	80 64       	ori	r24, 0x40	; 64
     5e8:	80 83       	st	Z, r24
     5ea:	08 95       	ret

000005ec <_Z15mozziAnalogReadh>:
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
	pin = analogPinToChannel(pin); // moved from extra #if which was below in Arduino code, and redefined in mozzi_analog.h, with notes
#elif defined(__AVR_ATmega1284__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     5ec:	8e 30       	cpi	r24, 0x0E	; 14
     5ee:	08 f0       	brcs	.+2      	; 0x5f2 <_Z15mozziAnalogReadh+0x6>
     5f0:	8e 50       	subi	r24, 0x0E	; 14
/** Put an item on the stack.
@param item the thing you want to put on the stack.
*/
	void push(T item)
	{
		if (top< (NUM_ITEMS-1)){
     5f2:	20 91 40 03 	lds	r18, 0x0340
     5f6:	30 91 41 03 	lds	r19, 0x0341
     5fa:	25 30       	cpi	r18, 0x05	; 5
     5fc:	31 05       	cpc	r19, r1
     5fe:	54 f4       	brge	.+20     	; 0x614 <_Z15mozziAnalogReadh+0x28>
			top++;
     600:	2f 5f       	subi	r18, 0xFF	; 255
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	30 93 41 03 	sts	0x0341, r19
     608:	20 93 40 03 	sts	0x0340, r18
			_array[top]=item;
     60c:	f9 01       	movw	r30, r18
     60e:	e6 5c       	subi	r30, 0xC6	; 198
     610:	fc 4f       	sbci	r31, 0xFC	; 252
     612:	80 83       	st	Z, r24

int mozziAnalogRead(unsigned char pin) {
	//analogPinToChannel<pin>;
	pin = adcPinToChannelNum(pin); // allow for channel or pin numbers
	adc_channels_to_read.push(pin);
	return analog_readings[pin];
     614:	e8 2f       	mov	r30, r24
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	e2 5d       	subi	r30, 0xD2	; 210
     61e:	fc 4f       	sbci	r31, 0xFC	; 252
     620:	20 81       	ld	r18, Z
     622:	31 81       	ldd	r19, Z+1	; 0x01
}
     624:	c9 01       	movw	r24, r18
     626:	08 95       	ret

00000628 <_Z23adcReadSelectedChannelsv>:



/* gets the next channel to read off the stack, and if there is a channel there, it changes to that channel and startsa conversion.
*/
void adcReadSelectedChannels() {
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	1f 92       	push	r1
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
/** Get the item on top of the stack.
@return T the item
*/
	T pop()
	{
		if(top==-1) return -1;
     632:	80 91 40 03 	lds	r24, 0x0340
     636:	90 91 41 03 	lds	r25, 0x0341
     63a:	8f 3f       	cpi	r24, 0xFF	; 255
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	92 07       	cpc	r25, r18
     640:	61 f0       	breq	.+24     	; 0x65a <_Z23adcReadSelectedChannelsv+0x32>
		T item =_array[top];
     642:	fc 01       	movw	r30, r24
     644:	e6 5c       	subi	r30, 0xC6	; 198
     646:	fc 4f       	sbci	r31, 0xFC	; 252
     648:	20 81       	ld	r18, Z
     64a:	29 83       	std	Y+1, r18	; 0x01
		top--;
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	90 93 41 03 	sts	0x0341, r25
     652:	80 93 40 03 	sts	0x0340, r24
		return item;
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	01 c0       	rjmp	.+2      	; 0x65c <_Z23adcReadSelectedChannelsv+0x34>
/** Get the item on top of the stack.
@return T the item
*/
	T pop()
	{
		if(top==-1) return -1;
     65a:	8f ef       	ldi	r24, 0xFF	; 255
	current_channel = adc_channels_to_read.pop();
     65c:	80 93 00 01 	sts	0x0100, r24
	if(current_channel != -1) adcStartConversion(current_channel);
     660:	80 91 00 01 	lds	r24, 0x0100
     664:	8f 3f       	cpi	r24, 0xFF	; 255
     666:	19 f0       	breq	.+6      	; 0x66e <_Z23adcReadSelectedChannelsv+0x46>
     668:	80 91 00 01 	lds	r24, 0x0100
     66c:	b5 df       	rcall	.-150    	; 0x5d8 <_Z18adcStartConversionh>
}
     66e:	0f 90       	pop	r0
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <_Z17adcStartReadCyclev>:
volatile static char current_channel = -1; // volatile because accessed in control and adc ISRs
static bool first = true;


void adcStartReadCycle(){
	if (current_channel == -1) {
     676:	80 91 00 01 	lds	r24, 0x0100
     67a:	8f 3f       	cpi	r24, 0xFF	; 255
     67c:	21 f4       	brne	.+8      	; 0x686 <_Z17adcStartReadCyclev+0x10>
#if (USE_AUDIO_INPUT == true)
		adc_channels_to_read.push(0); // analog 0 is for audio
#else
		adcReadSelectedChannels();
     67e:	d4 df       	rcall	.-88     	; 0x628 <_Z23adcReadSelectedChannelsv>
		first = true;		
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 01 01 	sts	0x0101, r24
     686:	08 95       	ret

00000688 <_Z21startSecondControlADCv>:
	// do nothing
}
*/

void startSecondControlADC() {
	ADCSRA |= (1 << ADSC); // start a second conversion on the current channel
     688:	ea e7       	ldi	r30, 0x7A	; 122
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	80 64       	ori	r24, 0x40	; 64
     690:	80 83       	st	Z, r24
     692:	08 95       	ret

00000694 <_Z23receiveSecondControlADCv>:
}


void receiveSecondControlADC(){
	analog_readings[current_channel] = ADC; // officially (ADCL | (ADCH << 8)) but the compiler works it out
     694:	e0 91 00 01 	lds	r30, 0x0100
     698:	80 91 78 00 	lds	r24, 0x0078
     69c:	90 91 79 00 	lds	r25, 0x0079
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 0b       	sbc	r31, r31
     6a4:	e2 5d       	subi	r30, 0xD2	; 210
     6a6:	fc 4f       	sbci	r31, 0xFC	; 252
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	80 83       	st	Z, r24
     6ac:	08 95       	ret

000006ae <__vector_21>:
doing 2 conversions on each channel but only keeping the second conversion each time, 
because the first conversion after changing channels is often inaccurate.
*/
#if(USE_AUDIO_INPUT==false)

ISR(ADC_vect, ISR_BLOCK) {
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	2f 93       	push	r18
     6ba:	3f 93       	push	r19
     6bc:	4f 93       	push	r20
     6be:	5f 93       	push	r21
     6c0:	6f 93       	push	r22
     6c2:	7f 93       	push	r23
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	af 93       	push	r26
     6ca:	bf 93       	push	r27
     6cc:	ef 93       	push	r30
     6ce:	ff 93       	push	r31
	if (first){
     6d0:	80 91 01 01 	lds	r24, 0x0101
     6d4:	88 23       	and	r24, r24
     6d6:	21 f0       	breq	.+8      	; 0x6e0 <__vector_21+0x32>
      	//<1us
      	startSecondControlADC();
     6d8:	d7 df       	rcall	.-82     	; 0x688 <_Z21startSecondControlADCv>
      	first=false;
     6da:	10 92 01 01 	sts	0x0101, r1
     6de:	05 c0       	rjmp	.+10     	; 0x6ea <__vector_21+0x3c>
  	}else{	
  		// 3us
      	receiveSecondControlADC();
     6e0:	d9 df       	rcall	.-78     	; 0x694 <_Z23receiveSecondControlADCv>
      	adcReadSelectedChannels();
     6e2:	a2 df       	rcall	.-188    	; 0x628 <_Z23adcReadSelectedChannelsv>
      	first=true;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 01 01 	sts	0x0101, r24
	}
}
     6ea:	ff 91       	pop	r31
     6ec:	ef 91       	pop	r30
     6ee:	bf 91       	pop	r27
     6f0:	af 91       	pop	r26
     6f2:	9f 91       	pop	r25
     6f4:	8f 91       	pop	r24
     6f6:	7f 91       	pop	r23
     6f8:	6f 91       	pop	r22
     6fa:	5f 91       	pop	r21
     6fc:	4f 91       	pop	r20
     6fe:	3f 91       	pop	r19
     700:	2f 91       	pop	r18
     702:	0f 90       	pop	r0
     704:	0f be       	out	0x3f, r0	; 63
     706:	0f 90       	pop	r0
     708:	1f 90       	pop	r1
     70a:	18 95       	reti

0000070c <_GLOBAL__sub_I__Z19setupFastAnalogReadc>:
	int top;

public:
	/** Constructor
	*/
	Stack(): top(-1)
     70c:	8f ef       	ldi	r24, 0xFF	; 255
     70e:	9f ef       	ldi	r25, 0xFF	; 255
     710:	90 93 41 03 	sts	0x0341, r25
     714:	80 93 40 03 	sts	0x0340, r24
     718:	08 95       	ret

0000071a <_Z10xorshift96v>:
@return a random 32 bit integer.
@todo check timing of xorshift96(), rand() and other PRNG candidates.
 */

unsigned long xorshift96()
{ //period 2^96-1
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
	// static unsigned long x=123456789, y=362436069, z=521288629;
	unsigned long t;

	x ^= x << 16;
     71e:	80 91 02 01 	lds	r24, 0x0102
     722:	90 91 03 01 	lds	r25, 0x0103
     726:	a0 91 04 01 	lds	r26, 0x0104
     72a:	b0 91 05 01 	lds	r27, 0x0105
     72e:	bc 01       	movw	r22, r24
     730:	55 27       	eor	r21, r21
     732:	44 27       	eor	r20, r20
     734:	48 27       	eor	r20, r24
     736:	59 27       	eor	r21, r25
     738:	6a 27       	eor	r22, r26
     73a:	7b 27       	eor	r23, r27
	x ^= x >> 5;
     73c:	db 01       	movw	r26, r22
     73e:	ca 01       	movw	r24, r20
     740:	35 e0       	ldi	r19, 0x05	; 5
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	3a 95       	dec	r19
     74c:	d1 f7       	brne	.-12     	; 0x742 <_Z10xorshift96v+0x28>
     74e:	84 27       	eor	r24, r20
     750:	95 27       	eor	r25, r21
     752:	a6 27       	eor	r26, r22
     754:	b7 27       	eor	r27, r23
	x ^= x << 1;

	t = x;
	x = y;
     756:	40 91 06 01 	lds	r20, 0x0106
     75a:	50 91 07 01 	lds	r21, 0x0107
     75e:	60 91 08 01 	lds	r22, 0x0108
     762:	70 91 09 01 	lds	r23, 0x0109
     766:	40 93 02 01 	sts	0x0102, r20
     76a:	50 93 03 01 	sts	0x0103, r21
     76e:	60 93 04 01 	sts	0x0104, r22
     772:	70 93 05 01 	sts	0x0105, r23
	y = z;
     776:	00 91 0a 01 	lds	r16, 0x010A
     77a:	10 91 0b 01 	lds	r17, 0x010B
     77e:	20 91 0c 01 	lds	r18, 0x010C
     782:	30 91 0d 01 	lds	r19, 0x010D
     786:	00 93 06 01 	sts	0x0106, r16
     78a:	10 93 07 01 	sts	0x0107, r17
     78e:	20 93 08 01 	sts	0x0108, r18
     792:	30 93 09 01 	sts	0x0109, r19
	// static unsigned long x=123456789, y=362436069, z=521288629;
	unsigned long t;

	x ^= x << 16;
	x ^= x >> 5;
	x ^= x << 1;
     796:	04 27       	eor	r16, r20
     798:	15 27       	eor	r17, r21
     79a:	26 27       	eor	r18, r22
     79c:	37 27       	eor	r19, r23

	t = x;
	x = y;
	y = z;
	z = t ^ x ^ y;
     79e:	08 27       	eor	r16, r24
     7a0:	19 27       	eor	r17, r25
     7a2:	2a 27       	eor	r18, r26
     7a4:	3b 27       	eor	r19, r27
	// static unsigned long x=123456789, y=362436069, z=521288629;
	unsigned long t;

	x ^= x << 16;
	x ^= x >> 5;
	x ^= x << 1;
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	aa 1f       	adc	r26, r26
     7ac:	bb 1f       	adc	r27, r27

	t = x;
	x = y;
	y = z;
	z = t ^ x ^ y;
     7ae:	08 27       	eor	r16, r24
     7b0:	19 27       	eor	r17, r25
     7b2:	2a 27       	eor	r18, r26
     7b4:	3b 27       	eor	r19, r27
     7b6:	00 93 0a 01 	sts	0x010A, r16
     7ba:	10 93 0b 01 	sts	0x010B, r17
     7be:	20 93 0c 01 	sts	0x010C, r18
     7c2:	30 93 0d 01 	sts	0x010D, r19

	return z;
}
     7c6:	b8 01       	movw	r22, r16
     7c8:	c9 01       	movw	r24, r18
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <_Z4randi>:
Ranged random number generator, faster than Arduino's built-in random function, which is too slow for Mozzi.
@param maxval the maximum signed int value of the range to be chosen from.  Maxval-1 will be the largest value possibly returned by the function.
@return a random int between 0 and maxval-1 inclusive.
*/
int rand(int maxval)
{
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ec 01       	movw	r28, r24
	return (int) (((xorshift96() & 0xFFFF) * maxval)>>16);
     7d6:	a1 df       	rcall	.-190    	; 0x71a <_Z10xorshift96v>
     7d8:	9b 01       	movw	r18, r22
     7da:	ac 01       	movw	r20, r24
     7dc:	44 27       	eor	r20, r20
     7de:	55 27       	eor	r21, r21
     7e0:	de 01       	movw	r26, r28
     7e2:	96 da       	rcall	.-2772   	; 0xfffffd10 <__eeprom_end+0xff7efd10>
     7e4:	ac 01       	movw	r20, r24
     7e6:	66 27       	eor	r22, r22
     7e8:	77 27       	eor	r23, r23
}
     7ea:	ca 01       	movw	r24, r20
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <_ZN9TimerZero4initEjPFvvEb>:
void (*TimerZero::f_)();
unsigned TimerZero::period_;
//------------------------------------------------------------------------------
// initialize timer 0
unsigned char TimerZero::init(unsigned usec, void (*f)(), bool reset)
{
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	cf 93       	push	r28
	f_ = f;
     7fc:	70 93 4d 03 	sts	0x034D, r23
     800:	60 93 4c 03 	sts	0x034C, r22
	reset_ = reset;
     804:	40 93 4e 03 	sts	0x034E, r20
	// assume F_CPU is a multiple of 1000000
	// number of clock ticks to delay usec microseconds
	unsigned long ticks = usec * (F_CPU/1000000);
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	23 e0       	ldi	r18, 0x03	; 3
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	2a 95       	dec	r18
     818:	d1 f7       	brne	.-12     	; 0x80e <_ZN9TimerZero4initEjPFvvEb+0x1c>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
	// determine prescale factor and TOP/OCR2A value
	// use minimum prescale factor
	unsigned char ps, i;
	for (i = 0; i < sizeof(preScale); i++)
	{
		ps = pgm_read_byte(&preScale[i]);
     81e:	f9 01       	movw	r30, r18
     820:	e6 5a       	subi	r30, 0xA6	; 166
     822:	ff 4f       	sbci	r31, 0xFF	; 255
     824:	c4 91       	lpm	r28, Z
		if (ps && (ticks >> i) <= 256)
     826:	cc 23       	and	r28, r28
     828:	81 f0       	breq	.+32     	; 0x84a <_ZN9TimerZero4initEjPFvvEb+0x58>
     82a:	6c 01       	movw	r12, r24
     82c:	7d 01       	movw	r14, r26
     82e:	02 2e       	mov	r0, r18
     830:	04 c0       	rjmp	.+8      	; 0x83a <_ZN9TimerZero4initEjPFvvEb+0x48>
     832:	f6 94       	lsr	r15
     834:	e7 94       	ror	r14
     836:	d7 94       	ror	r13
     838:	c7 94       	ror	r12
     83a:	0a 94       	dec	r0
     83c:	d2 f7       	brpl	.-12     	; 0x832 <_ZN9TimerZero4initEjPFvvEb+0x40>
     83e:	41 e0       	ldi	r20, 0x01	; 1
     840:	c4 16       	cp	r12, r20
     842:	d4 06       	cpc	r13, r20
     844:	e1 04       	cpc	r14, r1
     846:	f1 04       	cpc	r15, r1
     848:	38 f0       	brcs	.+14     	; 0x858 <_ZN9TimerZero4initEjPFvvEb+0x66>
     84a:	2f 5f       	subi	r18, 0xFF	; 255
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
	// number of clock ticks to delay usec microseconds
	unsigned long ticks = usec * (F_CPU/1000000);
	// determine prescale factor and TOP/OCR2A value
	// use minimum prescale factor
	unsigned char ps, i;
	for (i = 0; i < sizeof(preScale); i++)
     84e:	2b 30       	cpi	r18, 0x0B	; 11
     850:	31 05       	cpc	r19, r1
     852:	29 f7       	brne	.-54     	; 0x81e <_ZN9TimerZero4initEjPFvvEb+0x2c>
		if (ps && (ticks >> i) <= 256)
			break;
	}
	//return error if usec is too large
	if (i == sizeof(preScale))
		return false;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	1b c0       	rjmp	.+54     	; 0x88e <_ZN9TimerZero4initEjPFvvEb+0x9c>
	period_ = ((long)(ticks >> i) * (1 << i))/ (F_CPU /1000000);
     858:	a1 e0       	ldi	r26, 0x01	; 1
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	02 c0       	rjmp	.+4      	; 0x862 <_ZN9TimerZero4initEjPFvvEb+0x70>
     85e:	aa 0f       	add	r26, r26
     860:	bb 1f       	adc	r27, r27
     862:	2a 95       	dec	r18
     864:	e2 f7       	brpl	.-8      	; 0x85e <_ZN9TimerZero4initEjPFvvEb+0x6c>
     866:	a7 01       	movw	r20, r14
     868:	96 01       	movw	r18, r12
     86a:	52 da       	rcall	.-2908   	; 0xfffffd10 <__eeprom_end+0xff7efd10>
     86c:	28 e0       	ldi	r18, 0x08	; 8
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	16 da       	rcall	.-3028   	; 0xfffffca2 <__eeprom_end+0xff7efca2>
     876:	30 93 4b 03 	sts	0x034B, r19
     87a:	20 93 4a 03 	sts	0x034A, r18
	//  Serial.println(i, DEC);
	// disable timer 0 interrupts
	TIMSK0 = 0;
     87e:	10 92 6e 00 	sts	0x006E, r1
	// use system clock (clkI/O)
	//ASSR &= ~(1 << AS2);
	// Clear Timer on Compare Match (CTC) mode
	TCCR0A = (1 << WGM01);
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	84 bd       	out	0x24, r24	; 36

	// only need prescale bits in TCCR0B
	TCCR0B = ps;
     886:	c5 bd       	out	0x25, r28	; 37

	// set TOP so timer period is (ticks >> i)
	OCR0A = (ticks >> i) - 1;
     888:	ca 94       	dec	r12
     88a:	c7 bc       	out	0x27, r12	; 39
	return true;
     88c:	81 e0       	ldi	r24, 0x01	; 1
}
     88e:	cf 91       	pop	r28
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	08 95       	ret

0000089a <_ZN9TimerZero5startEv>:
//------------------------------------------------------------------------------
// Start timer zero interrupts
void TimerZero::start()
{
	TIMSK0 |= (1 << OCIE0A);
     89a:	ee e6       	ldi	r30, 0x6E	; 110
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	82 60       	ori	r24, 0x02	; 2
     8a2:	80 83       	st	Z, r24
     8a4:	08 95       	ret

000008a6 <__vector_14>:
}
//------------------------------------------------------------------------------
// ISR for timer 0 Compare A interrupt
// TB2012 added ISR_NOBLOCK so it can be interrupted by Timer 1 (audio)
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
     8a6:	78 94       	sei
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
	// disable timer 0 interrupts
	TIMSK0 = 0;
     8ca:	10 92 6e 00 	sts	0x006E, r1
	// call user function
	(*TimerZero::f_)();
     8ce:	e0 91 4c 03 	lds	r30, 0x034C
     8d2:	f0 91 4d 03 	lds	r31, 0x034D
     8d6:	09 95       	icall
	// in case f_ enabled interrupts
	cli();
     8d8:	f8 94       	cli
	// clear counter if reset_ is true
	if (TimerZero::reset_)
     8da:	80 91 4e 03 	lds	r24, 0x034E
     8de:	88 23       	and	r24, r24
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <__vector_14+0x40>
	{
		// reset counter
		TCNT0 = 0;
     8e2:	16 bc       	out	0x26, r1	; 38
		// clear possible pending interrupt
		TIFR0 |= (1 << OCF0A);
     8e4:	a9 9a       	sbi	0x15, 1	; 21
	}
	// enable timer 2 COMPA interrupt
	TIMSK0 |= (1 << OCIE0A);
     8e6:	80 91 6e 00 	lds	r24, 0x006E
     8ea:	82 60       	ori	r24, 0x02	; 2
     8ec:	80 93 6e 00 	sts	0x006E, r24
}
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0
     90e:	1f 90       	pop	r1
     910:	18 95       	reti

00000912 <_Z7setLEDsh>:
	@note LED 4 is not working, because of pwm usage on the same pin
		  usage: setLEDS(0).. setLEDS(15)
	@param input unsigned char interpreted as byte
	*/
void setLEDs(unsigned char LEDFlag)
{
     912:	cf 93       	push	r28
     914:	c8 2f       	mov	r28, r24
	if ( LEDFlag & (1 << LED1Flag) )
     916:	80 ff       	sbrs	r24, 0
     918:	02 c0       	rjmp	.+4      	; 0x91e <_Z7setLEDsh+0xc>
	{
		digitalWrite(LED1, HIGH); // LED1 ein
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	01 c0       	rjmp	.+2      	; 0x920 <_Z7setLEDsh+0xe>
	} else
	{
		digitalWrite(LED1, LOW); // LED1 aus
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	88 e0       	ldi	r24, 0x08	; 8
     922:	41 d9       	rcall	.-3454   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
	}
	
	if ( LEDFlag & (1 << LED2Flag) )
     924:	c1 ff       	sbrs	r28, 1
     926:	02 c0       	rjmp	.+4      	; 0x92c <_Z7setLEDsh+0x1a>
	{
		digitalWrite(LED2, HIGH); // LED2 ein
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	01 c0       	rjmp	.+2      	; 0x92e <_Z7setLEDsh+0x1c>
	} else
	{
		digitalWrite(LED2, LOW); // LED2 aus
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	8a e0       	ldi	r24, 0x0A	; 10
     930:	3a d9       	rcall	.-3468   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
	}

	if ( LEDFlag & (1 << LED3Flag) )
     932:	c2 ff       	sbrs	r28, 2
     934:	02 c0       	rjmp	.+4      	; 0x93a <_Z7setLEDsh+0x28>
	{
		digitalWrite(LED3, HIGH); // LED3 ein
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	01 c0       	rjmp	.+2      	; 0x93c <_Z7setLEDsh+0x2a>
	} else
	{
		digitalWrite(LED3, LOW);// LED3 aus
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	87 e0       	ldi	r24, 0x07	; 7
     93e:	33 d9       	rcall	.-3482   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
	}

	if ( LEDFlag & (1 << LED4Flag) )
     940:	c3 ff       	sbrs	r28, 3
     942:	02 c0       	rjmp	.+4      	; 0x948 <_Z7setLEDsh+0x36>
	{
		digitalWrite(LED4, HIGH); // LED4 ein
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	01 c0       	rjmp	.+2      	; 0x94a <_Z7setLEDsh+0x38>
	} else
	{
		digitalWrite(LED4, LOW);  // LED4 aus
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	83 e0       	ldi	r24, 0x03	; 3
	}
	
}
     94c:	cf 91       	pop	r28
	if ( LEDFlag & (1 << LED4Flag) )
	{
		digitalWrite(LED4, HIGH); // LED4 ein
	} else
	{
		digitalWrite(LED4, LOW);  // LED4 aus
     94e:	2b c9       	rjmp	.-3498   	; 0xfffffba6 <__eeprom_end+0xff7efba6>

00000950 <_Z11getByteBeath>:
}

/** generates ByteBeatcode Output
	@param input unsigned char number of the code to play
	*/
char getByteBeat(unsigned char ByteCodeSel) {
     950:	2f 92       	push	r2
     952:	3f 92       	push	r3
     954:	4f 92       	push	r4
     956:	5f 92       	push	r5
     958:	6f 92       	push	r6
     95a:	7f 92       	push	r7
     95c:	8f 92       	push	r8
     95e:	9f 92       	push	r9
     960:	af 92       	push	r10
     962:	bf 92       	push	r11
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	00 d0       	rcall	.+0      	; 0x976 <_Z11getByteBeath+0x26>
     976:	00 d0       	rcall	.+0      	; 0x978 <_Z11getByteBeath+0x28>
     978:	00 d0       	rcall	.+0      	; 0x97a <_Z11getByteBeath+0x2a>
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62

switch (ByteCodeSel) {
     97e:	e8 2f       	mov	r30, r24
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	e3 31       	cpi	r30, 0x13	; 19
     984:	f1 05       	cpc	r31, r1
     986:	08 f0       	brcs	.+2      	; 0x98a <_Z11getByteBeath+0x3a>
     988:	97 c4       	rjmp	.+2350   	; 0x12b8 <_Z11getByteBeath+0x968>
     98a:	e6 5e       	subi	r30, 0xE6	; 230
     98c:	ff 4f       	sbci	r31, 0xFF	; 255
     98e:	09 94       	ijmp
	
	case 0:
	ByteCode=0;
     990:	10 92 9d 03 	sts	0x039D, r1
	setLEDs(0);
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	8f c4       	rjmp	.+2334   	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 1:
//	ByteCode = ((-t&4095)*(255&t*(t&t>>13))>>XValue)+(127&t*(234&t>>8&t>>3)>>(3&t>>YValue)); // by tejeez
	ByteCode = t&((t<<3)/(((t*YValue)/245)*((XValue/2)))); // by DP
     998:	30 90 9e 03 	lds	r3, 0x039E
     99c:	b0 90 9f 03 	lds	r11, 0x039F
     9a0:	c0 90 a0 03 	lds	r12, 0x03A0
     9a4:	d0 90 a1 03 	lds	r13, 0x03A1
     9a8:	e0 90 a2 03 	lds	r14, 0x03A2
     9ac:	f0 90 a3 03 	lds	r15, 0x03A3
     9b0:	e0 91 a4 03 	lds	r30, 0x03A4
     9b4:	10 91 a5 03 	lds	r17, 0x03A5
     9b8:	23 2d       	mov	r18, r3
     9ba:	3b 2d       	mov	r19, r11
     9bc:	a6 01       	movw	r20, r12
     9be:	b7 01       	movw	r22, r14
     9c0:	8e 2f       	mov	r24, r30
     9c2:	91 2f       	mov	r25, r17
     9c4:	03 e0       	ldi	r16, 0x03	; 3
     9c6:	47 da       	rcall	.-2930   	; 0xfffffe56 <__eeprom_end+0xff7efe56>
     9c8:	52 2e       	mov	r5, r18
     9ca:	63 2e       	mov	r6, r19
     9cc:	74 2e       	mov	r7, r20
     9ce:	85 2e       	mov	r8, r21
     9d0:	96 2e       	mov	r9, r22
     9d2:	79 83       	std	Y+1, r23	; 0x01
     9d4:	28 2e       	mov	r2, r24
     9d6:	49 2e       	mov	r4, r25
     9d8:	20 91 a6 03 	lds	r18, 0x03A6
     9dc:	92 2f       	mov	r25, r18
     9de:	99 0f       	add	r25, r25
     9e0:	99 0b       	sbc	r25, r25
     9e2:	a3 2c       	mov	r10, r3
     9e4:	0e 2f       	mov	r16, r30
     9e6:	39 2f       	mov	r19, r25
     9e8:	49 2f       	mov	r20, r25
     9ea:	59 2f       	mov	r21, r25
     9ec:	69 2f       	mov	r22, r25
     9ee:	79 2f       	mov	r23, r25
     9f0:	89 2f       	mov	r24, r25
     9f2:	a1 d9       	rcall	.-3262   	; 0xfffffd36 <__eeprom_end+0xff7efd36>
     9f4:	15 ef       	ldi	r17, 0xF5	; 245
     9f6:	a1 2e       	mov	r10, r17
     9f8:	b1 2c       	mov	r11, r1
     9fa:	c1 2c       	mov	r12, r1
     9fc:	d1 2c       	mov	r13, r1
     9fe:	e1 2c       	mov	r14, r1
     a00:	f1 2c       	mov	r15, r1
     a02:	00 e0       	ldi	r16, 0x00	; 0
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	8c d9       	rcall	.-3304   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     a08:	10 91 a7 03 	lds	r17, 0x03A7
     a0c:	17 fd       	sbrc	r17, 7
     a0e:	1f 5f       	subi	r17, 0xFF	; 255
     a10:	a1 2e       	mov	r10, r17
     a12:	a5 94       	asr	r10
     a14:	11 0f       	add	r17, r17
     a16:	11 0b       	sbc	r17, r17
     a18:	b1 2e       	mov	r11, r17
     a1a:	c1 2e       	mov	r12, r17
     a1c:	d1 2e       	mov	r13, r17
     a1e:	e1 2e       	mov	r14, r17
     a20:	f1 2e       	mov	r15, r17
     a22:	01 2f       	mov	r16, r17
     a24:	88 d9       	rcall	.-3312   	; 0xfffffd36 <__eeprom_end+0xff7efd36>
     a26:	59 01       	movw	r10, r18
     a28:	6a 01       	movw	r12, r20
     a2a:	7b 01       	movw	r14, r22
     a2c:	8c 01       	movw	r16, r24
     a2e:	25 2d       	mov	r18, r5
     a30:	36 2d       	mov	r19, r6
     a32:	47 2d       	mov	r20, r7
     a34:	58 2d       	mov	r21, r8
     a36:	69 2d       	mov	r22, r9
     a38:	79 81       	ldd	r23, Y+1	; 0x01
     a3a:	82 2d       	mov	r24, r2
     a3c:	94 2d       	mov	r25, r4
     a3e:	70 d9       	rcall	.-3360   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     a40:	23 21       	and	r18, r3
     a42:	20 93 9d 03 	sts	0x039D, r18
     a46:	f8 c3       	rjmp	.+2032   	; 0x1238 <_Z11getByteBeath+0x8e8>
	setLEDs(1);
	break;
	case 2:
	ByteCode = t*(t>>XValue&t>>8&123&t>>YValue); // by tejeez
     a48:	f0 91 9e 03 	lds	r31, 0x039E
     a4c:	80 90 9f 03 	lds	r8, 0x039F
     a50:	90 90 a0 03 	lds	r9, 0x03A0
     a54:	10 91 a1 03 	lds	r17, 0x03A1
     a58:	e0 90 a2 03 	lds	r14, 0x03A2
     a5c:	f0 90 a3 03 	lds	r15, 0x03A3
     a60:	b0 91 a4 03 	lds	r27, 0x03A4
     a64:	a0 91 a5 03 	lds	r26, 0x03A5
     a68:	2f 2f       	mov	r18, r31
     a6a:	38 2d       	mov	r19, r8
     a6c:	49 2d       	mov	r20, r9
     a6e:	51 2f       	mov	r21, r17
     a70:	b7 01       	movw	r22, r14
     a72:	8b 2f       	mov	r24, r27
     a74:	9a 2f       	mov	r25, r26
     a76:	08 e0       	ldi	r16, 0x08	; 8
     a78:	fd d9       	rcall	.-3078   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     a7a:	e2 2f       	mov	r30, r18
     a7c:	eb 77       	andi	r30, 0x7B	; 123
     a7e:	00 91 a7 03 	lds	r16, 0x03A7
     a82:	2f 2f       	mov	r18, r31
     a84:	38 2d       	mov	r19, r8
     a86:	49 2d       	mov	r20, r9
     a88:	51 2f       	mov	r21, r17
     a8a:	b7 01       	movw	r22, r14
     a8c:	8b 2f       	mov	r24, r27
     a8e:	9a 2f       	mov	r25, r26
     a90:	f1 d9       	rcall	.-3102   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     a92:	e2 23       	and	r30, r18
     a94:	00 91 a6 03 	lds	r16, 0x03A6
     a98:	2f 2f       	mov	r18, r31
     a9a:	38 2d       	mov	r19, r8
     a9c:	49 2d       	mov	r20, r9
     a9e:	51 2f       	mov	r21, r17
     aa0:	b7 01       	movw	r22, r14
     aa2:	8b 2f       	mov	r24, r27
     aa4:	9a 2f       	mov	r25, r26
     aa6:	e6 d9       	rcall	.-3124   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     aa8:	e2 23       	and	r30, r18
     aaa:	ef 9f       	mul	r30, r31
     aac:	e0 2d       	mov	r30, r0
     aae:	11 24       	eor	r1, r1
     ab0:	e0 93 9d 03 	sts	0x039D, r30
     ab4:	df c3       	rjmp	.+1982   	; 0x1274 <_Z11getByteBeath+0x924>
	setLEDs(2);
	break;
	case 3:
	//ByteCode = (t*((t>>9|t>>XValue)&YValue&t>>6));   // by visy
	ByteCode = (((t*15+(XValue*t)) & (t>>(((9-YValue/25))+1)))) | t*XValue | (t/2)*XValue;
     ab6:	a0 91 a7 03 	lds	r26, 0x03A7
     aba:	ea 2f       	mov	r30, r26
     abc:	ee 0f       	add	r30, r30
     abe:	ee 0b       	sbc	r30, r30
     ac0:	b0 91 9e 03 	lds	r27, 0x039E
     ac4:	b0 90 9f 03 	lds	r11, 0x039F
     ac8:	c0 90 a0 03 	lds	r12, 0x03A0
     acc:	d0 90 a1 03 	lds	r13, 0x03A1
     ad0:	e0 90 a2 03 	lds	r14, 0x03A2
     ad4:	f0 90 a3 03 	lds	r15, 0x03A3
     ad8:	90 90 a4 03 	lds	r9, 0x03A4
     adc:	a0 90 a5 03 	lds	r10, 0x03A5
     ae0:	2b 2f       	mov	r18, r27
     ae2:	3b 2d       	mov	r19, r11
     ae4:	a6 01       	movw	r20, r12
     ae6:	b7 01       	movw	r22, r14
     ae8:	89 2d       	mov	r24, r9
     aea:	9a 2d       	mov	r25, r10
     aec:	01 e0       	ldi	r16, 0x01	; 1
     aee:	c2 d9       	rcall	.-3196   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     af0:	a2 9f       	mul	r26, r18
     af2:	f0 2d       	mov	r31, r0
     af4:	11 24       	eor	r1, r1
     af6:	ab 9f       	mul	r26, r27
     af8:	80 2d       	mov	r24, r0
     afa:	11 24       	eor	r1, r1
     afc:	f8 2b       	or	r31, r24
     afe:	80 91 a6 03 	lds	r24, 0x03A6
     b02:	69 e1       	ldi	r22, 0x19	; 25
     b04:	ae d8       	rcall	.-3748   	; 0xfffffc62 <__eeprom_end+0xff7efc62>
     b06:	0a e0       	ldi	r16, 0x0A	; 10
     b08:	10 e0       	ldi	r17, 0x00	; 0
     b0a:	08 1b       	sub	r16, r24
     b0c:	11 09       	sbc	r17, r1
     b0e:	87 fd       	sbrc	r24, 7
     b10:	13 95       	inc	r17
     b12:	2b 2f       	mov	r18, r27
     b14:	3b 2d       	mov	r19, r11
     b16:	a6 01       	movw	r20, r12
     b18:	b7 01       	movw	r22, r14
     b1a:	89 2d       	mov	r24, r9
     b1c:	9a 2d       	mov	r25, r10
     b1e:	aa d9       	rcall	.-3244   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     b20:	12 2f       	mov	r17, r18
     b22:	2a 2f       	mov	r18, r26
     b24:	3e 2f       	mov	r19, r30
     b26:	4e 2f       	mov	r20, r30
     b28:	5e 2f       	mov	r21, r30
     b2a:	6e 2f       	mov	r22, r30
     b2c:	7e 2f       	mov	r23, r30
     b2e:	8e 2f       	mov	r24, r30
     b30:	9e 2f       	mov	r25, r30
     b32:	af e0       	ldi	r26, 0x0F	; 15
     b34:	ae d9       	rcall	.-3236   	; 0xfffffe92 <__eeprom_end+0xff7efe92>
     b36:	b2 9f       	mul	r27, r18
     b38:	b0 2d       	mov	r27, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	b1 23       	and	r27, r17
     b3e:	fb 2b       	or	r31, r27
     b40:	f0 93 9d 03 	sts	0x039D, r31
     b44:	b7 c3       	rjmp	.+1902   	; 0x12b4 <_Z11getByteBeath+0x964>
	setLEDs(3);
	break;
	case 4:
	//ByteCode = (t*(t>>5|t>>XValue))>>(t>>(YValue));   // by tejeez
	ByteCode=(t*((XValue+2)/2))^(t/((YValue+3)/2)); //by DP
     b46:	90 90 9e 03 	lds	r9, 0x039E
     b4a:	a0 91 9f 03 	lds	r26, 0x039F
     b4e:	40 91 a0 03 	lds	r20, 0x03A0
     b52:	50 91 a1 03 	lds	r21, 0x03A1
     b56:	60 91 a2 03 	lds	r22, 0x03A2
     b5a:	70 91 a3 03 	lds	r23, 0x03A3
     b5e:	80 91 a4 03 	lds	r24, 0x03A4
     b62:	90 91 a5 03 	lds	r25, 0x03A5
     b66:	20 91 a6 03 	lds	r18, 0x03A6
     b6a:	33 27       	eor	r19, r19
     b6c:	27 fd       	sbrc	r18, 7
     b6e:	30 95       	com	r19
     b70:	f9 01       	movw	r30, r18
     b72:	33 96       	adiw	r30, 0x03	; 3
     b74:	f7 ff       	sbrs	r31, 7
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <_Z11getByteBeath+0x22c>
     b78:	f9 01       	movw	r30, r18
     b7a:	34 96       	adiw	r30, 0x04	; 4
     b7c:	f5 95       	asr	r31
     b7e:	e7 95       	ror	r30
     b80:	1f 2f       	mov	r17, r31
     b82:	11 0f       	add	r17, r17
     b84:	11 0b       	sbc	r17, r17
     b86:	5f 01       	movw	r10, r30
     b88:	c1 2e       	mov	r12, r17
     b8a:	d1 2e       	mov	r13, r17
     b8c:	e1 2e       	mov	r14, r17
     b8e:	f1 2e       	mov	r15, r17
     b90:	01 2f       	mov	r16, r17
     b92:	29 2d       	mov	r18, r9
     b94:	3a 2f       	mov	r19, r26
     b96:	c4 d8       	rcall	.-3704   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     b98:	40 91 a7 03 	lds	r20, 0x03A7
     b9c:	55 27       	eor	r21, r21
     b9e:	47 fd       	sbrc	r20, 7
     ba0:	50 95       	com	r21
     ba2:	ca 01       	movw	r24, r20
     ba4:	02 96       	adiw	r24, 0x02	; 2
     ba6:	97 ff       	sbrs	r25, 7
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <_Z11getByteBeath+0x25e>
     baa:	ca 01       	movw	r24, r20
     bac:	03 96       	adiw	r24, 0x03	; 3
     bae:	95 95       	asr	r25
     bb0:	87 95       	ror	r24
     bb2:	89 9d       	mul	r24, r9
     bb4:	80 2d       	mov	r24, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	82 27       	eor	r24, r18
     bba:	80 93 9d 03 	sts	0x039D, r24
	setLEDs(4);
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	7a c3       	rjmp	.+1780   	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 5:
	ByteCode = ((((t*(t>>XValue)|(t>>9))&46&t>>8))^((t&t>>(YValue))|(t>>6))); // by xpansive;
     bc2:	f0 91 9e 03 	lds	r31, 0x039E
     bc6:	70 90 9f 03 	lds	r7, 0x039F
     bca:	80 90 a0 03 	lds	r8, 0x03A0
     bce:	90 90 a1 03 	lds	r9, 0x03A1
     bd2:	10 91 a2 03 	lds	r17, 0x03A2
     bd6:	e0 90 a3 03 	lds	r14, 0x03A3
     bda:	f0 90 a4 03 	lds	r15, 0x03A4
     bde:	b0 91 a5 03 	lds	r27, 0x03A5
     be2:	00 91 a7 03 	lds	r16, 0x03A7
     be6:	2f 2f       	mov	r18, r31
     be8:	37 2d       	mov	r19, r7
     bea:	a4 01       	movw	r20, r8
     bec:	61 2f       	mov	r22, r17
     bee:	7e 2d       	mov	r23, r14
     bf0:	8f 2d       	mov	r24, r15
     bf2:	9b 2f       	mov	r25, r27
     bf4:	3f d9       	rcall	.-3458   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     bf6:	2f 9f       	mul	r18, r31
     bf8:	e0 2d       	mov	r30, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	2f 2f       	mov	r18, r31
     bfe:	37 2d       	mov	r19, r7
     c00:	a4 01       	movw	r20, r8
     c02:	61 2f       	mov	r22, r17
     c04:	7e 2d       	mov	r23, r14
     c06:	8f 2d       	mov	r24, r15
     c08:	9b 2f       	mov	r25, r27
     c0a:	09 e0       	ldi	r16, 0x09	; 9
     c0c:	33 d9       	rcall	.-3482   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     c0e:	e2 2b       	or	r30, r18
     c10:	2f 2f       	mov	r18, r31
     c12:	37 2d       	mov	r19, r7
     c14:	a4 01       	movw	r20, r8
     c16:	61 2f       	mov	r22, r17
     c18:	7e 2d       	mov	r23, r14
     c1a:	8f 2d       	mov	r24, r15
     c1c:	9b 2f       	mov	r25, r27
     c1e:	08 e0       	ldi	r16, 0x08	; 8
     c20:	29 d9       	rcall	.-3502   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     c22:	2e 72       	andi	r18, 0x2E	; 46
     c24:	e2 23       	and	r30, r18
     c26:	00 91 a6 03 	lds	r16, 0x03A6
     c2a:	2f 2f       	mov	r18, r31
     c2c:	37 2d       	mov	r19, r7
     c2e:	a4 01       	movw	r20, r8
     c30:	61 2f       	mov	r22, r17
     c32:	7e 2d       	mov	r23, r14
     c34:	8f 2d       	mov	r24, r15
     c36:	9b 2f       	mov	r25, r27
     c38:	1d d9       	rcall	.-3526   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     c3a:	a2 2f       	mov	r26, r18
     c3c:	af 23       	and	r26, r31
     c3e:	2f 2f       	mov	r18, r31
     c40:	37 2d       	mov	r19, r7
     c42:	a4 01       	movw	r20, r8
     c44:	61 2f       	mov	r22, r17
     c46:	7e 2d       	mov	r23, r14
     c48:	8f 2d       	mov	r24, r15
     c4a:	9b 2f       	mov	r25, r27
     c4c:	06 e0       	ldi	r16, 0x06	; 6
     c4e:	12 d9       	rcall	.-3548   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     c50:	a2 2b       	or	r26, r18
     c52:	ea 27       	eor	r30, r26
     c54:	e0 93 9d 03 	sts	0x039D, r30
	setLEDs(5);
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	2d c3       	rjmp	.+1626   	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 6:
	ByteCode = ((t&4096)?((t*(t^t%XValue)|(t>>4))>>1):(t>>YValue)|((t&8192)?t<<2:t)); // by skurk (raer's version)
     c5c:	20 90 9e 03 	lds	r2, 0x039E
     c60:	20 91 9f 03 	lds	r18, 0x039F
     c64:	29 83       	std	Y+1, r18	; 0x01
     c66:	40 90 a0 03 	lds	r4, 0x03A0
     c6a:	50 90 a1 03 	lds	r5, 0x03A1
     c6e:	60 90 a2 03 	lds	r6, 0x03A2
     c72:	70 90 a3 03 	lds	r7, 0x03A3
     c76:	80 90 a4 03 	lds	r8, 0x03A4
     c7a:	90 90 a5 03 	lds	r9, 0x03A5
     c7e:	32 2f       	mov	r19, r18
     c80:	30 71       	andi	r19, 0x10	; 16
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	14 d9       	rcall	.-3544   	; 0xfffffebc <__eeprom_end+0xff7efebc>
     c94:	09 f4       	brne	.+2      	; 0xc98 <_Z11getByteBeath+0x348>
     c96:	3f c0       	rjmp	.+126    	; 0xd16 <_Z11getByteBeath+0x3c6>
     c98:	a0 90 a7 03 	lds	r10, 0x03A7
     c9c:	1a 2d       	mov	r17, r10
     c9e:	11 0f       	add	r17, r17
     ca0:	11 0b       	sbc	r17, r17
     ca2:	b1 2e       	mov	r11, r17
     ca4:	c1 2e       	mov	r12, r17
     ca6:	d1 2e       	mov	r13, r17
     ca8:	e1 2e       	mov	r14, r17
     caa:	f1 2e       	mov	r15, r17
     cac:	01 2f       	mov	r16, r17
     cae:	22 2d       	mov	r18, r2
     cb0:	39 81       	ldd	r19, Y+1	; 0x01
     cb2:	a2 01       	movw	r20, r4
     cb4:	b3 01       	movw	r22, r6
     cb6:	c4 01       	movw	r24, r8
     cb8:	31 d8       	rcall	.-3998   	; 0xfffffd1c <__eeprom_end+0xff7efd1c>
     cba:	22 25       	eor	r18, r2
     cbc:	e9 81       	ldd	r30, Y+1	; 0x01
     cbe:	3e 27       	eor	r19, r30
     cc0:	44 25       	eor	r20, r4
     cc2:	55 25       	eor	r21, r5
     cc4:	66 25       	eor	r22, r6
     cc6:	77 25       	eor	r23, r7
     cc8:	a2 2c       	mov	r10, r2
     cca:	be 2e       	mov	r11, r30
     ccc:	62 01       	movw	r12, r4
     cce:	73 01       	movw	r14, r6
     cd0:	84 01       	movw	r16, r8
     cd2:	88 25       	eor	r24, r8
     cd4:	99 25       	eor	r25, r9
     cd6:	2f d8       	rcall	.-4002   	; 0xfffffd36 <__eeprom_end+0xff7efd36>
     cd8:	32 2e       	mov	r3, r18
     cda:	13 2f       	mov	r17, r19
     cdc:	b4 2f       	mov	r27, r20
     cde:	a5 2f       	mov	r26, r21
     ce0:	f6 2f       	mov	r31, r22
     ce2:	e7 2f       	mov	r30, r23
     ce4:	7c 01       	movw	r14, r24
     ce6:	22 2d       	mov	r18, r2
     ce8:	3b 2d       	mov	r19, r11
     cea:	a2 01       	movw	r20, r4
     cec:	b3 01       	movw	r22, r6
     cee:	c4 01       	movw	r24, r8
     cf0:	04 e0       	ldi	r16, 0x04	; 4
     cf2:	c0 d8       	rcall	.-3712   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     cf4:	32 2a       	or	r3, r18
     cf6:	13 2b       	or	r17, r19
     cf8:	b4 2b       	or	r27, r20
     cfa:	a5 2b       	or	r26, r21
     cfc:	f6 2b       	or	r31, r22
     cfe:	e7 2b       	or	r30, r23
     d00:	23 2d       	mov	r18, r3
     d02:	31 2f       	mov	r19, r17
     d04:	4b 2f       	mov	r20, r27
     d06:	5a 2f       	mov	r21, r26
     d08:	6f 2f       	mov	r22, r31
     d0a:	7e 2f       	mov	r23, r30
     d0c:	8e 29       	or	r24, r14
     d0e:	9f 29       	or	r25, r15
     d10:	01 e0       	ldi	r16, 0x01	; 1
     d12:	b0 d8       	rcall	.-3744   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     d14:	19 c0       	rjmp	.+50     	; 0xd48 <_Z11getByteBeath+0x3f8>
     d16:	00 91 a6 03 	lds	r16, 0x03A6
     d1a:	22 2d       	mov	r18, r2
     d1c:	39 81       	ldd	r19, Y+1	; 0x01
     d1e:	a2 01       	movw	r20, r4
     d20:	b3 01       	movw	r22, r6
     d22:	c4 01       	movw	r24, r8
     d24:	a7 d8       	rcall	.-3762   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     d26:	e2 2f       	mov	r30, r18
     d28:	39 81       	ldd	r19, Y+1	; 0x01
     d2a:	30 72       	andi	r19, 0x20	; 32
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	bf d8       	rcall	.-3714   	; 0xfffffebc <__eeprom_end+0xff7efebc>
     d3e:	11 f0       	breq	.+4      	; 0xd44 <_Z11getByteBeath+0x3f4>
     d40:	22 0c       	add	r2, r2
     d42:	22 0c       	add	r2, r2
     d44:	22 2d       	mov	r18, r2
     d46:	2e 2b       	or	r18, r30
     d48:	20 93 9d 03 	sts	0x039D, r18
	setLEDs(6);
     d4c:	86 e0       	ldi	r24, 0x06	; 6
     d4e:	b3 c2       	rjmp	.+1382   	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 7:
	ByteCode =  t*(t>>XValue&t>>8&YValue&t>>3);
     d50:	f0 91 9e 03 	lds	r31, 0x039E
     d54:	80 90 9f 03 	lds	r8, 0x039F
     d58:	90 90 a0 03 	lds	r9, 0x03A0
     d5c:	10 91 a1 03 	lds	r17, 0x03A1
     d60:	e0 90 a2 03 	lds	r14, 0x03A2
     d64:	f0 90 a3 03 	lds	r15, 0x03A3
     d68:	b0 91 a4 03 	lds	r27, 0x03A4
     d6c:	a0 91 a5 03 	lds	r26, 0x03A5
     d70:	e0 91 a6 03 	lds	r30, 0x03A6
     d74:	2f 2f       	mov	r18, r31
     d76:	38 2d       	mov	r19, r8
     d78:	49 2d       	mov	r20, r9
     d7a:	51 2f       	mov	r21, r17
     d7c:	b7 01       	movw	r22, r14
     d7e:	8b 2f       	mov	r24, r27
     d80:	9a 2f       	mov	r25, r26
     d82:	08 e0       	ldi	r16, 0x08	; 8
     d84:	77 d8       	rcall	.-3858   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     d86:	e2 23       	and	r30, r18
     d88:	2f 2f       	mov	r18, r31
     d8a:	38 2d       	mov	r19, r8
     d8c:	49 2d       	mov	r20, r9
     d8e:	51 2f       	mov	r21, r17
     d90:	b7 01       	movw	r22, r14
     d92:	8b 2f       	mov	r24, r27
     d94:	9a 2f       	mov	r25, r26
     d96:	03 e0       	ldi	r16, 0x03	; 3
     d98:	6d d8       	rcall	.-3878   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     d9a:	e2 23       	and	r30, r18
     d9c:	00 91 a7 03 	lds	r16, 0x03A7
     da0:	2f 2f       	mov	r18, r31
     da2:	38 2d       	mov	r19, r8
     da4:	49 2d       	mov	r20, r9
     da6:	51 2f       	mov	r21, r17
     da8:	b7 01       	movw	r22, r14
     daa:	8b 2f       	mov	r24, r27
     dac:	9a 2f       	mov	r25, r26
     dae:	62 d8       	rcall	.-3900   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     db0:	e2 23       	and	r30, r18
     db2:	ef 9f       	mul	r30, r31
     db4:	e0 2d       	mov	r30, r0
     db6:	11 24       	eor	r1, r1
     db8:	e0 93 9d 03 	sts	0x039D, r30
	setLEDs(7);
     dbc:	87 e0       	ldi	r24, 0x07	; 7
     dbe:	7b c2       	rjmp	.+1270   	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 8:
	ByteCode = (t*5&(t>>XValue))|(t*3&(t*4>>(YValue))); // by miiro
     dc0:	f0 91 9e 03 	lds	r31, 0x039E
     dc4:	e0 90 9f 03 	lds	r14, 0x039F
     dc8:	f0 90 a0 03 	lds	r15, 0x03A0
     dcc:	10 91 a1 03 	lds	r17, 0x03A1
     dd0:	c0 90 a2 03 	lds	r12, 0x03A2
     dd4:	d0 90 a3 03 	lds	r13, 0x03A3
     dd8:	b0 91 a4 03 	lds	r27, 0x03A4
     ddc:	a0 91 a5 03 	lds	r26, 0x03A5
     de0:	2f 2f       	mov	r18, r31
     de2:	3e 2d       	mov	r19, r14
     de4:	4f 2d       	mov	r20, r15
     de6:	51 2f       	mov	r21, r17
     de8:	b6 01       	movw	r22, r12
     dea:	8b 2f       	mov	r24, r27
     dec:	9a 2f       	mov	r25, r26
     dee:	02 e0       	ldi	r16, 0x02	; 2
     df0:	32 d8       	rcall	.-3996   	; 0xfffffe56 <__eeprom_end+0xff7efe56>
     df2:	00 91 a6 03 	lds	r16, 0x03A6
     df6:	3e d8       	rcall	.-3972   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     df8:	ef 2f       	mov	r30, r31
     dfa:	ee 0f       	add	r30, r30
     dfc:	ef 0f       	add	r30, r31
     dfe:	e2 23       	and	r30, r18
     e00:	00 91 a7 03 	lds	r16, 0x03A7
     e04:	2f 2f       	mov	r18, r31
     e06:	3e 2d       	mov	r19, r14
     e08:	4f 2d       	mov	r20, r15
     e0a:	51 2f       	mov	r21, r17
     e0c:	b6 01       	movw	r22, r12
     e0e:	8b 2f       	mov	r24, r27
     e10:	9a 2f       	mov	r25, r26
     e12:	30 d8       	rcall	.-4000   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     e14:	8f 2f       	mov	r24, r31
     e16:	88 0f       	add	r24, r24
     e18:	88 0f       	add	r24, r24
     e1a:	8f 0f       	add	r24, r31
     e1c:	82 23       	and	r24, r18
     e1e:	e8 2b       	or	r30, r24
     e20:	e0 93 9d 03 	sts	0x039D, r30
	setLEDs(8);
     e24:	88 e0       	ldi	r24, 0x08	; 8
     e26:	47 c2       	rjmp	.+1166   	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 9:
	ByteCode = (t*(t>>5|t>>XValue))>>(t>>(YValue));   // by tejeez
     e28:	60 90 9e 03 	lds	r6, 0x039E
     e2c:	70 90 9f 03 	lds	r7, 0x039F
     e30:	80 90 a0 03 	lds	r8, 0x03A0
     e34:	90 90 a1 03 	lds	r9, 0x03A1
     e38:	f0 91 a2 03 	lds	r31, 0x03A2
     e3c:	fe 83       	std	Y+6, r31	; 0x06
     e3e:	20 91 a3 03 	lds	r18, 0x03A3
     e42:	2b 83       	std	Y+3, r18	; 0x03
     e44:	20 90 a4 03 	lds	r2, 0x03A4
     e48:	30 90 a5 03 	lds	r3, 0x03A5
     e4c:	00 91 a7 03 	lds	r16, 0x03A7
     e50:	93 01       	movw	r18, r6
     e52:	a4 01       	movw	r20, r8
     e54:	6f 2f       	mov	r22, r31
     e56:	7b 81       	ldd	r23, Y+3	; 0x03
     e58:	c1 01       	movw	r24, r2
     e5a:	0c d8       	rcall	.-4072   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     e5c:	29 01       	movw	r4, r18
     e5e:	b4 2f       	mov	r27, r20
     e60:	a5 2f       	mov	r26, r21
     e62:	fb 01       	movw	r30, r22
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	93 01       	movw	r18, r6
     e6a:	a4 01       	movw	r20, r8
     e6c:	6e 81       	ldd	r22, Y+6	; 0x06
     e6e:	7b 81       	ldd	r23, Y+3	; 0x03
     e70:	c1 01       	movw	r24, r2
     e72:	05 e0       	ldi	r16, 0x05	; 5
     e74:	ff d7       	rcall	.+4094   	; 0x1e74 <__lshrdi3>
     e76:	42 2a       	or	r4, r18
     e78:	53 2a       	or	r5, r19
     e7a:	b4 2b       	or	r27, r20
     e7c:	a5 2b       	or	r26, r21
     e7e:	e6 2b       	or	r30, r22
     e80:	f7 2b       	or	r31, r23
     e82:	53 01       	movw	r10, r6
     e84:	64 01       	movw	r12, r8
     e86:	ee 80       	ldd	r14, Y+6	; 0x06
     e88:	fb 80       	ldd	r15, Y+3	; 0x03
     e8a:	81 01       	movw	r16, r2
     e8c:	92 01       	movw	r18, r4
     e8e:	4b 2f       	mov	r20, r27
     e90:	5a 2f       	mov	r21, r26
     e92:	bf 01       	movw	r22, r30
     e94:	e9 81       	ldd	r30, Y+1	; 0x01
     e96:	8e 2b       	or	r24, r30
     e98:	fa 81       	ldd	r31, Y+2	; 0x02
     e9a:	9f 2b       	or	r25, r31
     e9c:	4c d7       	rcall	.+3736   	; 0x1d36 <__muldi3>
     e9e:	d2 2e       	mov	r13, r18
     ea0:	e3 2e       	mov	r14, r19
     ea2:	f4 2e       	mov	r15, r20
     ea4:	15 2f       	mov	r17, r21
     ea6:	b6 2f       	mov	r27, r22
     ea8:	a7 2f       	mov	r26, r23
     eaa:	f8 2f       	mov	r31, r24
     eac:	e9 2f       	mov	r30, r25
     eae:	00 91 a6 03 	lds	r16, 0x03A6
     eb2:	93 01       	movw	r18, r6
     eb4:	a4 01       	movw	r20, r8
     eb6:	6e 81       	ldd	r22, Y+6	; 0x06
     eb8:	7b 81       	ldd	r23, Y+3	; 0x03
     eba:	c1 01       	movw	r24, r2
     ebc:	db d7       	rcall	.+4022   	; 0x1e74 <__lshrdi3>
     ebe:	02 2f       	mov	r16, r18
     ec0:	2d 2d       	mov	r18, r13
     ec2:	3e 2d       	mov	r19, r14
     ec4:	4f 2d       	mov	r20, r15
     ec6:	51 2f       	mov	r21, r17
     ec8:	6b 2f       	mov	r22, r27
     eca:	7a 2f       	mov	r23, r26
     ecc:	8f 2f       	mov	r24, r31
     ece:	9e 2f       	mov	r25, r30
     ed0:	d1 d7       	rcall	.+4002   	; 0x1e74 <__lshrdi3>
     ed2:	20 93 9d 03 	sts	0x039D, r18
	setLEDs(9);
     ed6:	89 e0       	ldi	r24, 0x09	; 9
     ed8:	ee c1       	rjmp	.+988    	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 10:
	ByteCode = (t*5&(t>>XValue))|(t*3&(t*4>>(YValue))); // by miiro
     eda:	f0 91 9e 03 	lds	r31, 0x039E
     ede:	e0 90 9f 03 	lds	r14, 0x039F
     ee2:	f0 90 a0 03 	lds	r15, 0x03A0
     ee6:	10 91 a1 03 	lds	r17, 0x03A1
     eea:	c0 90 a2 03 	lds	r12, 0x03A2
     eee:	d0 90 a3 03 	lds	r13, 0x03A3
     ef2:	b0 91 a4 03 	lds	r27, 0x03A4
     ef6:	a0 91 a5 03 	lds	r26, 0x03A5
     efa:	2f 2f       	mov	r18, r31
     efc:	3e 2d       	mov	r19, r14
     efe:	4f 2d       	mov	r20, r15
     f00:	51 2f       	mov	r21, r17
     f02:	b6 01       	movw	r22, r12
     f04:	8b 2f       	mov	r24, r27
     f06:	9a 2f       	mov	r25, r26
     f08:	02 e0       	ldi	r16, 0x02	; 2
     f0a:	a5 d7       	rcall	.+3914   	; 0x1e56 <__ashldi3>
     f0c:	00 91 a6 03 	lds	r16, 0x03A6
     f10:	b1 d7       	rcall	.+3938   	; 0x1e74 <__lshrdi3>
     f12:	ef 2f       	mov	r30, r31
     f14:	ee 0f       	add	r30, r30
     f16:	ef 0f       	add	r30, r31
     f18:	e2 23       	and	r30, r18
     f1a:	00 91 a7 03 	lds	r16, 0x03A7
     f1e:	2f 2f       	mov	r18, r31
     f20:	3e 2d       	mov	r19, r14
     f22:	4f 2d       	mov	r20, r15
     f24:	51 2f       	mov	r21, r17
     f26:	b6 01       	movw	r22, r12
     f28:	8b 2f       	mov	r24, r27
     f2a:	9a 2f       	mov	r25, r26
     f2c:	a3 d7       	rcall	.+3910   	; 0x1e74 <__lshrdi3>
     f2e:	8f 2f       	mov	r24, r31
     f30:	88 0f       	add	r24, r24
     f32:	88 0f       	add	r24, r24
     f34:	8f 0f       	add	r24, r31
     f36:	82 23       	and	r24, r18
     f38:	e8 2b       	or	r30, r24
     f3a:	e0 93 9d 03 	sts	0x039D, r30
	setLEDs(10);
     f3e:	8a e0       	ldi	r24, 0x0A	; 10
     f40:	ba c1       	rjmp	.+884    	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 11:
	ByteCode = (t|((t>>XValue)|(t>>7)))*t&(t>>11|t>>YValue); // by red
     f42:	e0 91 9e 03 	lds	r30, 0x039E
     f46:	80 90 9f 03 	lds	r8, 0x039F
     f4a:	90 90 a0 03 	lds	r9, 0x03A0
     f4e:	10 91 a1 03 	lds	r17, 0x03A1
     f52:	e0 90 a2 03 	lds	r14, 0x03A2
     f56:	f0 90 a3 03 	lds	r15, 0x03A3
     f5a:	b0 91 a4 03 	lds	r27, 0x03A4
     f5e:	a0 91 a5 03 	lds	r26, 0x03A5
     f62:	2e 2f       	mov	r18, r30
     f64:	38 2d       	mov	r19, r8
     f66:	49 2d       	mov	r20, r9
     f68:	51 2f       	mov	r21, r17
     f6a:	b7 01       	movw	r22, r14
     f6c:	8b 2f       	mov	r24, r27
     f6e:	9a 2f       	mov	r25, r26
     f70:	07 e0       	ldi	r16, 0x07	; 7
     f72:	80 d7       	rcall	.+3840   	; 0x1e74 <__lshrdi3>
     f74:	f2 2f       	mov	r31, r18
     f76:	fe 2b       	or	r31, r30
     f78:	00 91 a7 03 	lds	r16, 0x03A7
     f7c:	2e 2f       	mov	r18, r30
     f7e:	38 2d       	mov	r19, r8
     f80:	49 2d       	mov	r20, r9
     f82:	51 2f       	mov	r21, r17
     f84:	b7 01       	movw	r22, r14
     f86:	8b 2f       	mov	r24, r27
     f88:	9a 2f       	mov	r25, r26
     f8a:	74 d7       	rcall	.+3816   	; 0x1e74 <__lshrdi3>
     f8c:	f2 2b       	or	r31, r18
     f8e:	fe 9f       	mul	r31, r30
     f90:	f0 2d       	mov	r31, r0
     f92:	11 24       	eor	r1, r1
     f94:	00 91 a6 03 	lds	r16, 0x03A6
     f98:	2e 2f       	mov	r18, r30
     f9a:	38 2d       	mov	r19, r8
     f9c:	49 2d       	mov	r20, r9
     f9e:	51 2f       	mov	r21, r17
     fa0:	b7 01       	movw	r22, r14
     fa2:	8b 2f       	mov	r24, r27
     fa4:	9a 2f       	mov	r25, r26
     fa6:	66 d7       	rcall	.+3788   	; 0x1e74 <__lshrdi3>
     fa8:	72 2e       	mov	r7, r18
     faa:	2e 2f       	mov	r18, r30
     fac:	38 2d       	mov	r19, r8
     fae:	49 2d       	mov	r20, r9
     fb0:	51 2f       	mov	r21, r17
     fb2:	b7 01       	movw	r22, r14
     fb4:	8b 2f       	mov	r24, r27
     fb6:	9a 2f       	mov	r25, r26
     fb8:	0b e0       	ldi	r16, 0x0B	; 11
     fba:	5c d7       	rcall	.+3768   	; 0x1e74 <__lshrdi3>
     fbc:	72 2a       	or	r7, r18
     fbe:	f7 21       	and	r31, r7
     fc0:	f0 93 9d 03 	sts	0x039D, r31
	setLEDs(11);
     fc4:	8b e0       	ldi	r24, 0x0B	; 11
     fc6:	77 c1       	rjmp	.+750    	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 12:
	ByteCode = (t>>6|t|t>>(t>>XValue))*10+((t>>11)&YValue);  //by viznut
     fc8:	f0 91 9e 03 	lds	r31, 0x039E
     fcc:	80 90 9f 03 	lds	r8, 0x039F
     fd0:	90 90 a0 03 	lds	r9, 0x03A0
     fd4:	10 91 a1 03 	lds	r17, 0x03A1
     fd8:	e0 90 a2 03 	lds	r14, 0x03A2
     fdc:	f0 90 a3 03 	lds	r15, 0x03A3
     fe0:	b0 91 a4 03 	lds	r27, 0x03A4
     fe4:	a0 91 a5 03 	lds	r26, 0x03A5
     fe8:	2f 2f       	mov	r18, r31
     fea:	38 2d       	mov	r19, r8
     fec:	49 2d       	mov	r20, r9
     fee:	51 2f       	mov	r21, r17
     ff0:	b7 01       	movw	r22, r14
     ff2:	8b 2f       	mov	r24, r27
     ff4:	9a 2f       	mov	r25, r26
     ff6:	06 e0       	ldi	r16, 0x06	; 6
     ff8:	3d d7       	rcall	.+3706   	; 0x1e74 <__lshrdi3>
     ffa:	e2 2f       	mov	r30, r18
     ffc:	ef 2b       	or	r30, r31
     ffe:	00 91 a7 03 	lds	r16, 0x03A7
    1002:	2f 2f       	mov	r18, r31
    1004:	38 2d       	mov	r19, r8
    1006:	49 2d       	mov	r20, r9
    1008:	51 2f       	mov	r21, r17
    100a:	b7 01       	movw	r22, r14
    100c:	8b 2f       	mov	r24, r27
    100e:	9a 2f       	mov	r25, r26
    1010:	31 d7       	rcall	.+3682   	; 0x1e74 <__lshrdi3>
    1012:	02 2f       	mov	r16, r18
    1014:	2f 2f       	mov	r18, r31
    1016:	38 2d       	mov	r19, r8
    1018:	49 2d       	mov	r20, r9
    101a:	51 2f       	mov	r21, r17
    101c:	b7 01       	movw	r22, r14
    101e:	8b 2f       	mov	r24, r27
    1020:	9a 2f       	mov	r25, r26
    1022:	28 d7       	rcall	.+3664   	; 0x1e74 <__lshrdi3>
    1024:	e2 2b       	or	r30, r18
    1026:	2f 2f       	mov	r18, r31
    1028:	38 2d       	mov	r19, r8
    102a:	49 2d       	mov	r20, r9
    102c:	51 2f       	mov	r21, r17
    102e:	b7 01       	movw	r22, r14
    1030:	8b 2f       	mov	r24, r27
    1032:	9a 2f       	mov	r25, r26
    1034:	0b e0       	ldi	r16, 0x0B	; 11
    1036:	1e d7       	rcall	.+3644   	; 0x1e74 <__lshrdi3>
    1038:	80 91 a6 03 	lds	r24, 0x03A6
    103c:	82 23       	and	r24, r18
    103e:	2a e0       	ldi	r18, 0x0A	; 10
    1040:	e2 9f       	mul	r30, r18
    1042:	80 0d       	add	r24, r0
    1044:	11 24       	eor	r1, r1
    1046:	80 93 9d 03 	sts	0x039D, r24
	setLEDs(12);
    104a:	8c e0       	ldi	r24, 0x0C	; 12
    104c:	34 c1       	rjmp	.+616    	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 13:
	ByteCode = t*(XValue+20)>>9|t*42>>YValue;  //by Circuitnoise
    104e:	40 90 9e 03 	lds	r4, 0x039E
    1052:	50 90 9f 03 	lds	r5, 0x039F
    1056:	60 90 a0 03 	lds	r6, 0x03A0
    105a:	70 90 a1 03 	lds	r7, 0x03A1
    105e:	80 90 a2 03 	lds	r8, 0x03A2
    1062:	90 90 a3 03 	lds	r9, 0x03A3
    1066:	20 90 a4 03 	lds	r2, 0x03A4
    106a:	30 90 a5 03 	lds	r3, 0x03A5
    106e:	e0 91 a7 03 	lds	r30, 0x03A7
    1072:	ff 27       	eor	r31, r31
    1074:	e7 fd       	sbrc	r30, 7
    1076:	f0 95       	com	r31
    1078:	74 96       	adiw	r30, 0x14	; 20
    107a:	9f 2f       	mov	r25, r31
    107c:	99 0f       	add	r25, r25
    107e:	99 0b       	sbc	r25, r25
    1080:	52 01       	movw	r10, r4
    1082:	63 01       	movw	r12, r6
    1084:	74 01       	movw	r14, r8
    1086:	81 01       	movw	r16, r2
    1088:	9f 01       	movw	r18, r30
    108a:	49 2f       	mov	r20, r25
    108c:	59 2f       	mov	r21, r25
    108e:	69 2f       	mov	r22, r25
    1090:	79 2f       	mov	r23, r25
    1092:	89 2f       	mov	r24, r25
    1094:	50 d6       	rcall	.+3232   	; 0x1d36 <__muldi3>
    1096:	09 e0       	ldi	r16, 0x09	; 9
    1098:	ed d6       	rcall	.+3546   	; 0x1e74 <__lshrdi3>
    109a:	e2 2f       	mov	r30, r18
    109c:	92 01       	movw	r18, r4
    109e:	a3 01       	movw	r20, r6
    10a0:	b4 01       	movw	r22, r8
    10a2:	c1 01       	movw	r24, r2
    10a4:	01 e0       	ldi	r16, 0x01	; 1
    10a6:	d7 d6       	rcall	.+3502   	; 0x1e56 <__ashldi3>
    10a8:	59 01       	movw	r10, r18
    10aa:	6a 01       	movw	r12, r20
    10ac:	7b 01       	movw	r14, r22
    10ae:	f8 2f       	mov	r31, r24
    10b0:	19 2f       	mov	r17, r25
    10b2:	02 e0       	ldi	r16, 0x02	; 2
    10b4:	d0 d6       	rcall	.+3488   	; 0x1e56 <__ashldi3>
    10b6:	0f 2f       	mov	r16, r31
    10b8:	f8 d6       	rcall	.+3568   	; 0x1eaa <__subdi3>
    10ba:	59 01       	movw	r10, r18
    10bc:	6a 01       	movw	r12, r20
    10be:	7b 01       	movw	r14, r22
    10c0:	f8 2f       	mov	r31, r24
    10c2:	19 2f       	mov	r17, r25
    10c4:	03 e0       	ldi	r16, 0x03	; 3
    10c6:	c7 d6       	rcall	.+3470   	; 0x1e56 <__ashldi3>
    10c8:	0f 2f       	mov	r16, r31
    10ca:	ef d6       	rcall	.+3550   	; 0x1eaa <__subdi3>
    10cc:	00 91 a6 03 	lds	r16, 0x03A6
    10d0:	d1 d6       	rcall	.+3490   	; 0x1e74 <__lshrdi3>
    10d2:	e2 2b       	or	r30, r18
    10d4:	e0 93 9d 03 	sts	0x039D, r30
	setLEDs(13);
    10d8:	8d e0       	ldi	r24, 0x0D	; 13
    10da:	ed c0       	rjmp	.+474    	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 14:
	ByteCode = t*(XValue+20)>>8|t*42>>YValue;  //by Circuitnoise
    10dc:	40 90 9e 03 	lds	r4, 0x039E
    10e0:	50 90 9f 03 	lds	r5, 0x039F
    10e4:	60 90 a0 03 	lds	r6, 0x03A0
    10e8:	70 90 a1 03 	lds	r7, 0x03A1
    10ec:	80 90 a2 03 	lds	r8, 0x03A2
    10f0:	90 90 a3 03 	lds	r9, 0x03A3
    10f4:	20 90 a4 03 	lds	r2, 0x03A4
    10f8:	30 90 a5 03 	lds	r3, 0x03A5
    10fc:	e0 91 a7 03 	lds	r30, 0x03A7
    1100:	ff 27       	eor	r31, r31
    1102:	e7 fd       	sbrc	r30, 7
    1104:	f0 95       	com	r31
    1106:	74 96       	adiw	r30, 0x14	; 20
    1108:	9f 2f       	mov	r25, r31
    110a:	99 0f       	add	r25, r25
    110c:	99 0b       	sbc	r25, r25
    110e:	52 01       	movw	r10, r4
    1110:	63 01       	movw	r12, r6
    1112:	74 01       	movw	r14, r8
    1114:	81 01       	movw	r16, r2
    1116:	9f 01       	movw	r18, r30
    1118:	49 2f       	mov	r20, r25
    111a:	59 2f       	mov	r21, r25
    111c:	69 2f       	mov	r22, r25
    111e:	79 2f       	mov	r23, r25
    1120:	89 2f       	mov	r24, r25
    1122:	09 d6       	rcall	.+3090   	; 0x1d36 <__muldi3>
    1124:	08 e0       	ldi	r16, 0x08	; 8
    1126:	a6 d6       	rcall	.+3404   	; 0x1e74 <__lshrdi3>
    1128:	e2 2f       	mov	r30, r18
    112a:	92 01       	movw	r18, r4
    112c:	a3 01       	movw	r20, r6
    112e:	b4 01       	movw	r22, r8
    1130:	c1 01       	movw	r24, r2
    1132:	01 e0       	ldi	r16, 0x01	; 1
    1134:	90 d6       	rcall	.+3360   	; 0x1e56 <__ashldi3>
    1136:	59 01       	movw	r10, r18
    1138:	6a 01       	movw	r12, r20
    113a:	7b 01       	movw	r14, r22
    113c:	f8 2f       	mov	r31, r24
    113e:	19 2f       	mov	r17, r25
    1140:	02 e0       	ldi	r16, 0x02	; 2
    1142:	89 d6       	rcall	.+3346   	; 0x1e56 <__ashldi3>
    1144:	0f 2f       	mov	r16, r31
    1146:	b1 d6       	rcall	.+3426   	; 0x1eaa <__subdi3>
    1148:	59 01       	movw	r10, r18
    114a:	6a 01       	movw	r12, r20
    114c:	7b 01       	movw	r14, r22
    114e:	f8 2f       	mov	r31, r24
    1150:	19 2f       	mov	r17, r25
    1152:	03 e0       	ldi	r16, 0x03	; 3
    1154:	80 d6       	rcall	.+3328   	; 0x1e56 <__ashldi3>
    1156:	0f 2f       	mov	r16, r31
    1158:	a8 d6       	rcall	.+3408   	; 0x1eaa <__subdi3>
    115a:	00 91 a6 03 	lds	r16, 0x03A6
    115e:	8a d6       	rcall	.+3348   	; 0x1e74 <__lshrdi3>
    1160:	e2 2b       	or	r30, r18
    1162:	e0 93 9d 03 	sts	0x039D, r30
	setLEDs(14);
    1166:	8e e0       	ldi	r24, 0x0E	; 14
    1168:	a6 c0       	rjmp	.+332    	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 15:
	ByteCode = (((t>>XValue)|(t>>10))-2)%11*t&(YValue);  //by Circuitnoise
    116a:	60 90 9e 03 	lds	r6, 0x039E
    116e:	80 90 9f 03 	lds	r8, 0x039F
    1172:	90 90 a0 03 	lds	r9, 0x03A0
    1176:	b0 90 a1 03 	lds	r11, 0x03A1
    117a:	c0 90 a2 03 	lds	r12, 0x03A2
    117e:	d0 90 a3 03 	lds	r13, 0x03A3
    1182:	e0 90 a4 03 	lds	r14, 0x03A4
    1186:	f0 90 a5 03 	lds	r15, 0x03A5
    118a:	00 91 a7 03 	lds	r16, 0x03A7
    118e:	26 2d       	mov	r18, r6
    1190:	38 2d       	mov	r19, r8
    1192:	49 2d       	mov	r20, r9
    1194:	5b 2d       	mov	r21, r11
    1196:	b6 01       	movw	r22, r12
    1198:	c7 01       	movw	r24, r14
    119a:	6c d6       	rcall	.+3288   	; 0x1e74 <__lshrdi3>
    119c:	12 2f       	mov	r17, r18
    119e:	53 2e       	mov	r5, r19
    11a0:	b4 2f       	mov	r27, r20
    11a2:	a5 2f       	mov	r26, r21
    11a4:	f6 2f       	mov	r31, r22
    11a6:	e7 2f       	mov	r30, r23
    11a8:	78 2e       	mov	r7, r24
    11aa:	a9 2e       	mov	r10, r25
    11ac:	26 2d       	mov	r18, r6
    11ae:	38 2d       	mov	r19, r8
    11b0:	49 2d       	mov	r20, r9
    11b2:	5b 2d       	mov	r21, r11
    11b4:	b6 01       	movw	r22, r12
    11b6:	c7 01       	movw	r24, r14
    11b8:	0a e0       	ldi	r16, 0x0A	; 10
    11ba:	5c d6       	rcall	.+3256   	; 0x1e74 <__lshrdi3>
    11bc:	12 2b       	or	r17, r18
    11be:	53 2a       	or	r5, r19
    11c0:	b4 2b       	or	r27, r20
    11c2:	a5 2b       	or	r26, r21
    11c4:	f6 2b       	or	r31, r22
    11c6:	e7 2b       	or	r30, r23
    11c8:	21 2f       	mov	r18, r17
    11ca:	35 2d       	mov	r19, r5
    11cc:	4b 2f       	mov	r20, r27
    11ce:	5a 2f       	mov	r21, r26
    11d0:	6f 2f       	mov	r22, r31
    11d2:	7e 2f       	mov	r23, r30
    11d4:	87 29       	or	r24, r7
    11d6:	9a 29       	or	r25, r10
    11d8:	ae ef       	ldi	r26, 0xFE	; 254
    11da:	5b d6       	rcall	.+3254   	; 0x1e92 <__adddi3_s8>
    11dc:	eb e0       	ldi	r30, 0x0B	; 11
    11de:	ae 2e       	mov	r10, r30
    11e0:	b1 2c       	mov	r11, r1
    11e2:	c1 2c       	mov	r12, r1
    11e4:	d1 2c       	mov	r13, r1
    11e6:	e1 2c       	mov	r14, r1
    11e8:	f1 2c       	mov	r15, r1
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	96 d5       	rcall	.+2860   	; 0x1d1c <__umoddi3>
    11f0:	26 9d       	mul	r18, r6
    11f2:	20 2d       	mov	r18, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	80 91 a6 03 	lds	r24, 0x03A6
    11fa:	28 23       	and	r18, r24
    11fc:	20 93 9d 03 	sts	0x039D, r18
	setLEDs(15);
    1200:	8f e0       	ldi	r24, 0x0F	; 15
    1202:	59 c0       	rjmp	.+178    	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 16:
	ByteCode = (t>>XValue)|(t&(YValue));  //by Circuitnoise
    1204:	e0 91 9e 03 	lds	r30, 0x039E
    1208:	30 91 9f 03 	lds	r19, 0x039F
    120c:	40 91 a0 03 	lds	r20, 0x03A0
    1210:	50 91 a1 03 	lds	r21, 0x03A1
    1214:	60 91 a2 03 	lds	r22, 0x03A2
    1218:	70 91 a3 03 	lds	r23, 0x03A3
    121c:	00 91 a7 03 	lds	r16, 0x03A7
    1220:	2e 2f       	mov	r18, r30
    1222:	80 91 a4 03 	lds	r24, 0x03A4
    1226:	90 91 a5 03 	lds	r25, 0x03A5
    122a:	24 d6       	rcall	.+3144   	; 0x1e74 <__lshrdi3>
    122c:	80 91 a6 03 	lds	r24, 0x03A6
    1230:	8e 23       	and	r24, r30
    1232:	82 2b       	or	r24, r18
    1234:	80 93 9d 03 	sts	0x039D, r24
	setLEDs(1);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	3d c0       	rjmp	.+122    	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 17:
	ByteCode = (t>>XValue*2)|(t&(YValue));  //by Circuitnoise
    123c:	e0 91 9e 03 	lds	r30, 0x039E
    1240:	30 91 9f 03 	lds	r19, 0x039F
    1244:	40 91 a0 03 	lds	r20, 0x03A0
    1248:	50 91 a1 03 	lds	r21, 0x03A1
    124c:	60 91 a2 03 	lds	r22, 0x03A2
    1250:	70 91 a3 03 	lds	r23, 0x03A3
    1254:	00 91 a7 03 	lds	r16, 0x03A7
    1258:	00 0f       	add	r16, r16
    125a:	11 0b       	sbc	r17, r17
    125c:	2e 2f       	mov	r18, r30
    125e:	80 91 a4 03 	lds	r24, 0x03A4
    1262:	90 91 a5 03 	lds	r25, 0x03A5
    1266:	06 d6       	rcall	.+3084   	; 0x1e74 <__lshrdi3>
    1268:	80 91 a6 03 	lds	r24, 0x03A6
    126c:	8e 23       	and	r24, r30
    126e:	82 2b       	or	r24, r18
    1270:	80 93 9d 03 	sts	0x039D, r24
	setLEDs(2);
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	1f c0       	rjmp	.+62     	; 0x12b6 <_Z11getByteBeath+0x966>
	break;
	case 18:
	ByteCode = (t>>XValue*2)|((t&(YValue*4))-3);  //by Circuitnoise
    1278:	20 91 9e 03 	lds	r18, 0x039E
    127c:	30 91 9f 03 	lds	r19, 0x039F
    1280:	40 91 a0 03 	lds	r20, 0x03A0
    1284:	50 91 a1 03 	lds	r21, 0x03A1
    1288:	60 91 a2 03 	lds	r22, 0x03A2
    128c:	70 91 a3 03 	lds	r23, 0x03A3
    1290:	00 91 a7 03 	lds	r16, 0x03A7
    1294:	e0 91 a6 03 	lds	r30, 0x03A6
    1298:	ee 0f       	add	r30, r30
    129a:	ee 0f       	add	r30, r30
    129c:	e2 23       	and	r30, r18
    129e:	e3 50       	subi	r30, 0x03	; 3
    12a0:	00 0f       	add	r16, r16
    12a2:	11 0b       	sbc	r17, r17
    12a4:	80 91 a4 03 	lds	r24, 0x03A4
    12a8:	90 91 a5 03 	lds	r25, 0x03A5
    12ac:	e3 d5       	rcall	.+3014   	; 0x1e74 <__lshrdi3>
    12ae:	e2 2b       	or	r30, r18
    12b0:	e0 93 9d 03 	sts	0x039D, r30
	setLEDs(3);
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	2d db       	rcall	.-2470   	; 0x912 <_Z7setLEDsh>
	break;
}

 return ByteCode;	
}
    12b8:	80 91 9d 03 	lds	r24, 0x039D
    12bc:	26 96       	adiw	r28, 0x06	; 6
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	5f 90       	pop	r5
    12e6:	4f 90       	pop	r4
    12e8:	3f 90       	pop	r3
    12ea:	2f 90       	pop	r2
    12ec:	08 95       	ret

000012ee <_Z27updateControlByteBeatEnginev>:
}
/** manages the control changes of the ByteBeatEngine
	*/
void updateControlByteBeatEngine(){
	
	BytecodeSel=(POTI1Value/4)/14; // Range 0-18
    12ee:	80 91 a9 03 	lds	r24, 0x03A9
    12f2:	90 91 aa 03 	lds	r25, 0x03AA
    12f6:	68 e3       	ldi	r22, 0x38	; 56
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	c0 d4       	rcall	.+2432   	; 0x1c7c <__divmodhi4>
    12fc:	60 93 b2 03 	sts	0x03B2, r22
	XValue=(POTI2Value/4)/25; // Range 0-25
    1300:	80 91 ab 03 	lds	r24, 0x03AB
    1304:	90 91 ac 03 	lds	r25, 0x03AC
    1308:	24 e6       	ldi	r18, 0x64	; 100
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	b9 01       	movw	r22, r18
    130e:	b6 d4       	rcall	.+2412   	; 0x1c7c <__divmodhi4>
    1310:	60 93 a7 03 	sts	0x03A7, r22
	YValue=(POTI3Value/4)/25; // Range 0-25
    1314:	80 91 ad 03 	lds	r24, 0x03AD
    1318:	90 91 ae 03 	lds	r25, 0x03AE
    131c:	b9 01       	movw	r22, r18
    131e:	ae d4       	rcall	.+2396   	; 0x1c7c <__divmodhi4>
    1320:	60 93 a6 03 	sts	0x03A6, r22
    1324:	08 95       	ret

00001326 <loop>:
}

/** Mozzi Loop
	*/
void loop(){
  audioHook();
    1326:	f6 c7       	rjmp	.+4076   	; 0x2314 <__data_load_end+0x396>

00001328 <_ZN5OscilILj256ELj16384EE7setFreqEi>:
	setFreq_Q24n8() or or setFreq_Q16n16().
	@param frequency to play the wave table.
	*/
	inline
	void setFreq (int frequency) {
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1328:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    132a:	f8 94       	cli
		{
			phase_increment_fractional = ((((unsigned long)NUM_TABLE_CELLS<<ADJUST_FOR_NUM_TABLE_CELLS)*frequency)/UPDATE_RATE) << (OSCIL_F_BITS - ADJUST_FOR_NUM_TABLE_CELLS);
    132c:	ab 01       	movw	r20, r22
    132e:	66 27       	eor	r22, r22
    1330:	57 fd       	sbrc	r21, 7
    1332:	60 95       	com	r22
    1334:	76 2f       	mov	r23, r22
    1336:	ba 01       	movw	r22, r20
    1338:	55 27       	eor	r21, r21
    133a:	44 27       	eor	r20, r20
    133c:	e6 e0       	ldi	r30, 0x06	; 6
    133e:	76 95       	lsr	r23
    1340:	67 95       	ror	r22
    1342:	57 95       	ror	r21
    1344:	47 95       	ror	r20
    1346:	ea 95       	dec	r30
    1348:	d1 f7       	brne	.-12     	; 0x133e <_ZN5OscilILj256ELj16384EE7setFreqEi+0x16>
    134a:	fc 01       	movw	r30, r24
    134c:	44 83       	std	Z+4, r20	; 0x04
    134e:	55 83       	std	Z+5, r21	; 0x05
    1350:	66 83       	std	Z+6, r22	; 0x06
    1352:	77 83       	std	Z+7, r23	; 0x07
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1354:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1356:	08 95       	ret

00001358 <setup>:
	First routine after power on!!
	*/
void setup(){

  // set input/output pins
  pinMode(SWITCH1, INPUT_PULLUP);
    1358:	62 e0       	ldi	r22, 0x02	; 2
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	ec d3       	rcall	.+2008   	; 0x1b36 <pinMode>
  pinMode(SWITCH2, INPUT_PULLUP);
    135e:	62 e0       	ldi	r22, 0x02	; 2
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	e9 d3       	rcall	.+2002   	; 0x1b36 <pinMode>
  pinMode(SWITCH3, INPUT_PULLUP);
    1364:	62 e0       	ldi	r22, 0x02	; 2
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	e6 d3       	rcall	.+1996   	; 0x1b36 <pinMode>
  pinMode(PBUTTON1, INPUT_PULLUP);
    136a:	62 e0       	ldi	r22, 0x02	; 2
    136c:	85 e0       	ldi	r24, 0x05	; 5
    136e:	e3 d3       	rcall	.+1990   	; 0x1b36 <pinMode>
  pinMode(PBUTTON2, INPUT_PULLUP);
    1370:	62 e0       	ldi	r22, 0x02	; 2
    1372:	84 e0       	ldi	r24, 0x04	; 4
    1374:	e0 d3       	rcall	.+1984   	; 0x1b36 <pinMode>
  pinMode(POTI1, INPUT);
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	8e e0       	ldi	r24, 0x0E	; 14
    137a:	dd d3       	rcall	.+1978   	; 0x1b36 <pinMode>
  pinMode(POTI2, INPUT);
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	8f e0       	ldi	r24, 0x0F	; 15
    1380:	da d3       	rcall	.+1972   	; 0x1b36 <pinMode>
  pinMode(POTI3, INPUT);
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	80 e1       	ldi	r24, 0x10	; 16
    1386:	d7 d3       	rcall	.+1966   	; 0x1b36 <pinMode>
  pinMode(POTI4, INPUT);
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	81 e1       	ldi	r24, 0x11	; 17
    138c:	d4 d3       	rcall	.+1960   	; 0x1b36 <pinMode>
  pinMode(POTI5, INPUT);        	
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	82 e1       	ldi	r24, 0x12	; 18
    1392:	d1 d3       	rcall	.+1954   	; 0x1b36 <pinMode>
  pinMode(POTI6, INPUT);        	
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	83 e1       	ldi	r24, 0x13	; 19
    1398:	ce d3       	rcall	.+1948   	; 0x1b36 <pinMode>
  pinMode(LED1, OUTPUT);        	
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	88 e0       	ldi	r24, 0x08	; 8
    139e:	cb d3       	rcall	.+1942   	; 0x1b36 <pinMode>
  pinMode(LED2, OUTPUT);        	
    13a0:	61 e0       	ldi	r22, 0x01	; 1
    13a2:	8a e0       	ldi	r24, 0x0A	; 10
    13a4:	c8 d3       	rcall	.+1936   	; 0x1b36 <pinMode>
  pinMode(LED3, OUTPUT);
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	87 e0       	ldi	r24, 0x07	; 7
    13aa:	c5 d3       	rcall	.+1930   	; 0x1b36 <pinMode>
  
  //Setup Waves
  oSaw1.setFreq(440);
    13ac:	68 eb       	ldi	r22, 0xB8	; 184
    13ae:	71 e0       	ldi	r23, 0x01	; 1
    13b0:	83 e9       	ldi	r24, 0x93	; 147
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	b9 df       	rcall	.-142    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
  oSaw2.setFreq(440);
    13b6:	68 eb       	ldi	r22, 0xB8	; 184
    13b8:	71 e0       	ldi	r23, 0x01	; 1
    13ba:	89 e8       	ldi	r24, 0x89	; 137
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	b4 df       	rcall	.-152    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
  oSaw3.setFreq(440);
    13c0:	68 eb       	ldi	r22, 0xB8	; 184
    13c2:	71 e0       	ldi	r23, 0x01	; 1
    13c4:	8f e7       	ldi	r24, 0x7F	; 127
    13c6:	93 e0       	ldi	r25, 0x03	; 3
    13c8:	af df       	rcall	.-162    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
  oSin1.setFreq(440);
    13ca:	68 eb       	ldi	r22, 0xB8	; 184
    13cc:	71 e0       	ldi	r23, 0x01	; 1
    13ce:	8b e6       	ldi	r24, 0x6B	; 107
    13d0:	93 e0       	ldi	r25, 0x03	; 3
    13d2:	aa df       	rcall	.-172    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
  oSin2.setFreq(440);
    13d4:	68 eb       	ldi	r22, 0xB8	; 184
    13d6:	71 e0       	ldi	r23, 0x01	; 1
    13d8:	81 e6       	ldi	r24, 0x61	; 97
    13da:	93 e0       	ldi	r25, 0x03	; 3
    13dc:	a5 df       	rcall	.-182    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
  oSin3.setFreq(440);
    13de:	68 eb       	ldi	r22, 0xB8	; 184
    13e0:	71 e0       	ldi	r23, 0x01	; 1
    13e2:	87 e5       	ldi	r24, 0x57	; 87
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	a0 df       	rcall	.-192    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
  oLFO1.setFreq(5);
    13e8:	65 e0       	ldi	r22, 0x05	; 5
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	85 e7       	ldi	r24, 0x75	; 117
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	9b df       	rcall	.-202    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
	/** Set the resonance.  If you hear unwanted distortion, back off the resonance.
	@param resonance in the range 0-255.
	*/
	void setResonance(unsigned char resonance)
	{
		q = resonance;
    13f2:	10 92 4f 03 	sts	0x034F, r1

  // Set LowPassFilter Resonance
  lpf.setResonance(0);

  // Start the action!
  startMozzi(CONTROL_RATE);
    13f6:	80 e4       	ldi	r24, 0x40	; 64
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	06 c8       	rjmp	.-4084   	; 0x408 <_Z10startMozzii>

000013fc <_Z24updateControlDroneEnginev>:

 return ByteCode;	
}
/** manages the control changes of the DroneEngine
	*/
void updateControlDroneEngine(){
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29

	if (FMModus==0){
    1400:	80 91 a8 03 	lds	r24, 0x03A8
    1404:	60 91 a9 03 	lds	r22, 0x03A9
    1408:	70 91 aa 03 	lds	r23, 0x03AA
    140c:	81 11       	cpse	r24, r1
    140e:	12 c0       	rjmp	.+36     	; 0x1434 <_Z24updateControlDroneEnginev+0x38>
		// standard drone
		oSaw1.setFreq(POTI1Value);
    1410:	83 e9       	ldi	r24, 0x93	; 147
    1412:	93 e0       	ldi	r25, 0x03	; 3
    1414:	89 df       	rcall	.-238    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
		oSin1.setFreq(POTI2Value);
    1416:	60 91 ab 03 	lds	r22, 0x03AB
    141a:	70 91 ac 03 	lds	r23, 0x03AC
    141e:	8b e6       	ldi	r24, 0x6B	; 107
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	82 df       	rcall	.-252    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
		oSaw2.setFreq(POTI3Value);
    1424:	60 91 ad 03 	lds	r22, 0x03AD
    1428:	70 91 ae 03 	lds	r23, 0x03AE
    142c:	89 e8       	ldi	r24, 0x89	; 137
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	7b df       	rcall	.-266    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
    1432:	29 c0       	rjmp	.+82     	; 0x1486 <_Z24updateControlDroneEnginev+0x8a>
		// FM Modulation
		// map the knob to carrier frequency
		int carrier_freq = POTI1Value;

		//calculate the modulation frequency to
		int mod_freq = carrier_freq * mod_ratio;
    1434:	80 91 12 01 	lds	r24, 0x0112
    1438:	90 91 13 01 	lds	r25, 0x0113
    143c:	68 9f       	mul	r22, r24
    143e:	e0 01       	movw	r28, r0
    1440:	69 9f       	mul	r22, r25
    1442:	d0 0d       	add	r29, r0
    1444:	78 9f       	mul	r23, r24
    1446:	d0 0d       	add	r29, r0
    1448:	11 24       	eor	r1, r1
		// set the FM oscillator frequencies to the calculated values
		oSaw1.setFreq(POTI1Value);
    144a:	83 e9       	ldi	r24, 0x93	; 147
    144c:	93 e0       	ldi	r25, 0x03	; 3
    144e:	6c df       	rcall	.-296    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
		oSaw2.setFreq(mod_freq);
    1450:	be 01       	movw	r22, r28
    1452:	89 e8       	ldi	r24, 0x89	; 137
    1454:	93 e0       	ldi	r25, 0x03	; 3
    1456:	68 df       	rcall	.-304    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
		oSaw3.setFreq(POTI3Value);
    1458:	60 91 ad 03 	lds	r22, 0x03AD
    145c:	70 91 ae 03 	lds	r23, 0x03AE
    1460:	8f e7       	ldi	r24, 0x7F	; 127
    1462:	93 e0       	ldi	r25, 0x03	; 3
    1464:	61 df       	rcall	.-318    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
		fm_intensity = POTI2Value;
    1466:	80 91 ab 03 	lds	r24, 0x03AB
    146a:	90 91 ac 03 	lds	r25, 0x03AC
    146e:	aa 27       	eor	r26, r26
    1470:	97 fd       	sbrc	r25, 7
    1472:	a0 95       	com	r26
    1474:	ba 2f       	mov	r27, r26
    1476:	80 93 0e 01 	sts	0x010E, r24
    147a:	90 93 0f 01 	sts	0x010F, r25
    147e:	a0 93 10 01 	sts	0x0110, r26
    1482:	b0 93 11 01 	sts	0x0111, r27
	}
	
	if (NoiseModus==1) {
    1486:	80 91 af 03 	lds	r24, 0x03AF
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	09 f0       	breq	.+2      	; 0x1490 <_Z24updateControlDroneEnginev+0x94>
    148e:	3e c0       	rjmp	.+124    	; 0x150c <_Z24updateControlDroneEnginev+0x110>
		oSaw1.setFreq(POTI1Value);
    1490:	60 91 a9 03 	lds	r22, 0x03A9
    1494:	70 91 aa 03 	lds	r23, 0x03AA
    1498:	83 e9       	ldi	r24, 0x93	; 147
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	45 df       	rcall	.-374    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
		oSin1.setFreq(POTI2Value);
    149e:	60 91 ab 03 	lds	r22, 0x03AB
    14a2:	70 91 ac 03 	lds	r23, 0x03AC
    14a6:	8b e6       	ldi	r24, 0x6B	; 107
    14a8:	93 e0       	ldi	r25, 0x03	; 3
    14aa:	3e df       	rcall	.-388    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
		oSin2.setFreq(POTI3Value/23);
    14ac:	80 91 ad 03 	lds	r24, 0x03AD
    14b0:	90 91 ae 03 	lds	r25, 0x03AE
    14b4:	67 e1       	ldi	r22, 0x17	; 23
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	e1 d3       	rcall	.+1986   	; 0x1c7c <__divmodhi4>
    14ba:	81 e6       	ldi	r24, 0x61	; 97
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	34 df       	rcall	.-408    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>
		oSaw1.setPhase(rand(SAW256_NUM_CELLS));
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	85 d9       	rcall	.-3318   	; 0x7d0 <_Z4randi>
	// This could be called in the control interrupt, so phase_fractional should really be volatile,
	// but that could limit optimisation.  Since phase_fractional gets changed often in updateAudio()
	// (in loop()), it's probably worth keeping it nonvolatile until it causes problems
	void setPhase(unsigned int phase)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    14c6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14c8:	f8 94       	cli
		{
			phase_fractional = (unsigned long)phase << OSCIL_F_BITS;
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	dc 01       	movw	r26, r24
    14d0:	99 27       	eor	r25, r25
    14d2:	88 27       	eor	r24, r24
    14d4:	80 93 93 03 	sts	0x0393, r24
    14d8:	90 93 94 03 	sts	0x0394, r25
    14dc:	a0 93 95 03 	sts	0x0395, r26
    14e0:	b0 93 96 03 	sts	0x0396, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14e4:	2f bf       	out	0x3f, r18	; 63
		oSin1.setPhase(rand(SIN256_NUM_CELLS));
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	72 d9       	rcall	.-3356   	; 0x7d0 <_Z4randi>
	// This could be called in the control interrupt, so phase_fractional should really be volatile,
	// but that could limit optimisation.  Since phase_fractional gets changed often in updateAudio()
	// (in loop()), it's probably worth keeping it nonvolatile until it causes problems
	void setPhase(unsigned int phase)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    14ec:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14ee:	f8 94       	cli
		{
			phase_fractional = (unsigned long)phase << OSCIL_F_BITS;
    14f0:	a0 e0       	ldi	r26, 0x00	; 0
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	dc 01       	movw	r26, r24
    14f6:	99 27       	eor	r25, r25
    14f8:	88 27       	eor	r24, r24
    14fa:	80 93 6b 03 	sts	0x036B, r24
    14fe:	90 93 6c 03 	sts	0x036C, r25
    1502:	a0 93 6d 03 	sts	0x036D, r26
    1506:	b0 93 6e 03 	sts	0x036E, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    150a:	2f bf       	out	0x3f, r18	; 63

	}

	// LFO frequency
	oLFO1.setFreq(POTI4Value/49);
    150c:	80 91 b0 03 	lds	r24, 0x03B0
    1510:	90 91 b1 03 	lds	r25, 0x03B1
    1514:	61 e3       	ldi	r22, 0x31	; 49
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	b1 d3       	rcall	.+1890   	; 0x1c7c <__divmodhi4>
    151a:	85 e7       	ldi	r24, 0x75	; 117
    151c:	93 e0       	ldi	r25, 0x03	; 3
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
		oSin1.setPhase(rand(SIN256_NUM_CELLS));

	}

	// LFO frequency
	oLFO1.setFreq(POTI4Value/49);
    1522:	02 cf       	rjmp	.-508    	; 0x1328 <_ZN5OscilILj256ELj16384EE7setFreqEi>

00001524 <_Z13updateControlv>:
  audioHook();
}

/** Mozzi updateControl routine
	*/
void updateControl(){
    1524:	cf 93       	push	r28
	
	// read pushbuttons, switches and potentiometer values
	PButton1Value = digitalRead(PBUTTON1); // on/off
    1526:	85 e0       	ldi	r24, 0x05	; 5
    1528:	74 d3       	rcall	.+1768   	; 0x1c12 <digitalRead>
    152a:	80 93 b3 03 	sts	0x03B3, r24
	PButton2Value = digitalRead(PBUTTON2); // on/off
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	70 d3       	rcall	.+1760   	; 0x1c12 <digitalRead>
    1532:	80 93 b4 03 	sts	0x03B4, r24
	SWITCH1Value = digitalRead(SWITCH1); // on/off
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	6c d3       	rcall	.+1752   	; 0x1c12 <digitalRead>
    153a:	80 93 b5 03 	sts	0x03B5, r24
	SWITCH2Value = digitalRead(SWITCH2); // on/off
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	68 d3       	rcall	.+1744   	; 0x1c12 <digitalRead>
    1542:	80 93 b6 03 	sts	0x03B6, r24
	SWITCH3Value = digitalRead(SWITCH3); // on/off
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	64 d3       	rcall	.+1736   	; 0x1c12 <digitalRead>
    154a:	80 93 b7 03 	sts	0x03B7, r24
	
	POTI1Value = mozziAnalogRead(POTI1); // value is 0-1023
    154e:	8e e0       	ldi	r24, 0x0E	; 14
    1550:	4d d8       	rcall	.-3942   	; 0x5ec <_Z15mozziAnalogReadh>
    1552:	90 93 aa 03 	sts	0x03AA, r25
    1556:	80 93 a9 03 	sts	0x03A9, r24
	POTI2Value = mozziAnalogRead(POTI2); // value is 0-1023
    155a:	8f e0       	ldi	r24, 0x0F	; 15
    155c:	47 d8       	rcall	.-3954   	; 0x5ec <_Z15mozziAnalogReadh>
    155e:	90 93 ac 03 	sts	0x03AC, r25
    1562:	80 93 ab 03 	sts	0x03AB, r24
	POTI3Value = mozziAnalogRead(POTI3); // value is 0-1023
    1566:	80 e1       	ldi	r24, 0x10	; 16
    1568:	41 d8       	rcall	.-3966   	; 0x5ec <_Z15mozziAnalogReadh>
    156a:	90 93 ae 03 	sts	0x03AE, r25
    156e:	80 93 ad 03 	sts	0x03AD, r24
	POTI4Value = mozziAnalogRead(POTI4); // value is 0-1023
    1572:	81 e1       	ldi	r24, 0x11	; 17
    1574:	3b d8       	rcall	.-3978   	; 0x5ec <_Z15mozziAnalogReadh>
    1576:	90 93 b1 03 	sts	0x03B1, r25
    157a:	80 93 b0 03 	sts	0x03B0, r24
	POTI5Value = mozziAnalogRead(POTI5); // value is 0-255
    157e:	82 e1       	ldi	r24, 0x12	; 18
    1580:	35 d8       	rcall	.-3990   	; 0x5ec <_Z15mozziAnalogReadh>
    1582:	90 93 b9 03 	sts	0x03B9, r25
    1586:	80 93 b8 03 	sts	0x03B8, r24
	POTI6Value = mozziAnalogRead(POTI6); // value is 0-255
    158a:	83 e1       	ldi	r24, 0x13	; 19
    158c:	2f d8       	rcall	.-4002   	; 0x5ec <_Z15mozziAnalogReadh>
    158e:	80 93 ba 03 	sts	0x03BA, r24
    1592:	90 93 bb 03 	sts	0x03BB, r25
	
	// set LowPassFilter values
	lpf.setCutoffFreq(POTI5Value);
    1596:	20 91 b8 03 	lds	r18, 0x03B8
	@param cutoff use the range 0-255 to represent 0-8192 Hz (AUDIO_RATE/2).
	Be careful of distortion at the lower end, especially with high resonance.
	*/
	void setCutoffFreq(unsigned char cutoff)
	{
		f = cutoff;
    159a:	20 93 50 03 	sts	0x0350, r18
		fb = q+ucfxmul(q, SHIFTED_1 - cutoff);
    159e:	90 91 4f 03 	lds	r25, 0x034F
    15a2:	20 95       	com	r18

	// multiply two fixed point numbers (returns fixed point)
	inline
	unsigned int ucfxmul(unsigned char a, unsigned char b)
	{
		return (((unsigned int)a*b)>>FX_SHIFT);
    15a4:	29 9f       	mul	r18, r25
    15a6:	90 01       	movw	r18, r0
    15a8:	11 24       	eor	r1, r1
    15aa:	23 2f       	mov	r18, r19
    15ac:	33 27       	eor	r19, r19
	Be careful of distortion at the lower end, especially with high resonance.
	*/
	void setCutoffFreq(unsigned char cutoff)
	{
		f = cutoff;
		fb = q+ucfxmul(q, SHIFTED_1 - cutoff);
    15ae:	29 0f       	add	r18, r25
    15b0:	31 1d       	adc	r19, r1
    15b2:	30 93 52 03 	sts	0x0352, r19
    15b6:	20 93 51 03 	sts	0x0351, r18
	lpf.setResonance(POTI6Value);
    15ba:	80 93 4f 03 	sts	0x034F, r24

    // Phonosynth Drones or ByteBeatPlayer selection via Switch3(top one)
    if (SWITCH3Value == HIGH) {
    15be:	c0 91 b7 03 	lds	r28, 0x03B7
		setLEDs(0);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
	// set LowPassFilter values
	lpf.setCutoffFreq(POTI5Value);
	lpf.setResonance(POTI6Value);

    // Phonosynth Drones or ByteBeatPlayer selection via Switch3(top one)
    if (SWITCH3Value == HIGH) {
    15c4:	c1 30       	cpi	r28, 0x01	; 1
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <_Z13updateControlv+0xac>
		setLEDs(0);
    15c8:	a4 d9       	rcall	.-3256   	; 0x912 <_Z7setLEDsh>
		PhonosynthMode=1;
    15ca:	c0 93 bc 03 	sts	0x03BC, r28
    15ce:	1f c0       	rjmp	.+62     	; 0x160e <_Z13updateControlv+0xea>
		}
		else{
		setLEDs(0);	
    15d0:	a0 d9       	rcall	.-3264   	; 0x912 <_Z7setLEDsh>
		PhonosynthMode=0;
    15d2:	10 92 bc 03 	sts	0x03BC, r1
		
		//Noise Modus?
		if (SWITCH1Value == HIGH) {
    15d6:	c0 91 b5 03 	lds	r28, 0x03B5
    15da:	c1 30       	cpi	r28, 0x01	; 1
    15dc:	31 f4       	brne	.+12     	; 0x15ea <_Z13updateControlv+0xc6>
			digitalWrite(LED1, HIGH); 
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	88 e0       	ldi	r24, 0x08	; 8
    15e2:	e1 d2       	rcall	.+1474   	; 0x1ba6 <digitalWrite>
			NoiseModus=1;
    15e4:	c0 93 af 03 	sts	0x03AF, r28
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <_Z13updateControlv+0xd0>
		}
		else {
			NoiseModus=0;
    15ea:	10 92 af 03 	sts	0x03AF, r1
			digitalWrite(LED1, LOW); 
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	88 e0       	ldi	r24, 0x08	; 8
    15f2:	d9 d2       	rcall	.+1458   	; 0x1ba6 <digitalWrite>
		} // end of Switch1Value

		// Frequency Modulation Modus?
		if (SWITCH2Value == HIGH) {
    15f4:	80 91 b6 03 	lds	r24, 0x03B6
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	21 f4       	brne	.+8      	; 0x1604 <_Z13updateControlv+0xe0>
			FMModus=1;
    15fc:	80 93 a8 03 	sts	0x03A8, r24
			digitalWrite(LED2, HIGH);
    1600:	61 e0       	ldi	r22, 0x01	; 1
    1602:	03 c0       	rjmp	.+6      	; 0x160a <_Z13updateControlv+0xe6>
		}else{
			FMModus=0;
    1604:	10 92 a8 03 	sts	0x03A8, r1
			digitalWrite(LED2, LOW);
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	8a e0       	ldi	r24, 0x0A	; 10
    160c:	cc d2       	rcall	.+1432   	; 0x1ba6 <digitalWrite>
// 	}else if(PButton1Value_PREVIOUS==HIGH && PButton1Value==LOW){
// 		LPFByPass=1;
// 		delayMicroseconds(400);
// 	}
// 	PButton1Value_PREVIOUS=PButton1Value;
	if(PButton1Value==LOW){
    160e:	80 91 b3 03 	lds	r24, 0x03B3
    1612:	81 11       	cpse	r24, r1
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <_Z13updateControlv+0x10c>
		if (LPFByPass==0) {
    1616:	80 91 bd 03 	lds	r24, 0x03BD
    161a:	81 11       	cpse	r24, r1
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <_Z13updateControlv+0x102>
			LPFByPass=1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	80 93 bd 03 	sts	0x03BD, r24
    1624:	02 c0       	rjmp	.+4      	; 0x162a <_Z13updateControlv+0x106>
		 }else {
			LPFByPass=0;
    1626:	10 92 bd 03 	sts	0x03BD, r1
			};
		delayMicroseconds(400);
    162a:	80 e9       	ldi	r24, 0x90	; 144
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	14 d2       	rcall	.+1064   	; 0x1a58 <delayMicroseconds>
		}
    // Mute Button S2
	if(PButton2Value_PREVIOUS==LOW && PButton2Value==HIGH){
    1630:	90 91 be 03 	lds	r25, 0x03BE
    1634:	80 91 b4 03 	lds	r24, 0x03B4
    1638:	91 11       	cpse	r25, r1
    163a:	05 c0       	rjmp	.+10     	; 0x1646 <_Z13updateControlv+0x122>
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	61 f4       	brne	.+24     	; 0x1658 <_Z13updateControlv+0x134>
		  MutePhonosynth=1;
    1640:	80 93 14 01 	sts	0x0114, r24
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <_Z13updateControlv+0x12e>
		  delayMicroseconds(400);
	  }else if(PButton2Value_PREVIOUS==HIGH && PButton2Value==LOW){
    1646:	91 30       	cpi	r25, 0x01	; 1
    1648:	39 f4       	brne	.+14     	; 0x1658 <_Z13updateControlv+0x134>
    164a:	81 11       	cpse	r24, r1
    164c:	05 c0       	rjmp	.+10     	; 0x1658 <_Z13updateControlv+0x134>
		  MutePhonosynth=0;
    164e:	10 92 14 01 	sts	0x0114, r1
		  delayMicroseconds(400);
    1652:	80 e9       	ldi	r24, 0x90	; 144
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	00 d2       	rcall	.+1024   	; 0x1a58 <delayMicroseconds>
	  }
	PButton2Value_PREVIOUS=PButton2Value;
    1658:	80 91 b4 03 	lds	r24, 0x03B4
    165c:	80 93 be 03 	sts	0x03BE, r24
	  
	// handle now the specific engine controls
	if (PhonosynthMode==0) {
    1660:	80 91 bc 03 	lds	r24, 0x03BC
    1664:	81 11       	cpse	r24, r1
    1666:	02 c0       	rjmp	.+4      	; 0x166c <_Z13updateControlv+0x148>
		updateControlDroneEngine();
	} else {
		updateControlByteBeatEngine();
	}
   
}
    1668:	cf 91       	pop	r28
	  }
	PButton2Value_PREVIOUS=PButton2Value;
	  
	// handle now the specific engine controls
	if (PhonosynthMode==0) {
		updateControlDroneEngine();
    166a:	c8 ce       	rjmp	.-624    	; 0x13fc <_Z24updateControlDroneEnginev>
	} else {
		updateControlByteBeatEngine();
	}
   
}
    166c:	cf 91       	pop	r28
	  
	// handle now the specific engine controls
	if (PhonosynthMode==0) {
		updateControlDroneEngine();
	} else {
		updateControlByteBeatEngine();
    166e:	3f ce       	rjmp	.-898    	; 0x12ee <_Z27updateControlByteBeatEnginev>

00001670 <_ZN5OscilILj256ELj16384EE4nextEv>:

	/** Updates the phase according to the current frequency and returns the sample at the new phase position.
	@return the next sample.
	*/
	inline
	char next()
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	fc 01       	movw	r30, r24
	 */
	inline
	void incrementPhase()
	{
		//phase_fractional += (phase_increment_fractional | 1); // odd phase incr, attempt to reduce frequency spurs in output
		phase_fractional += phase_increment_fractional;
    1676:	44 81       	ldd	r20, Z+4	; 0x04
    1678:	55 81       	ldd	r21, Z+5	; 0x05
    167a:	66 81       	ldd	r22, Z+6	; 0x06
    167c:	77 81       	ldd	r23, Z+7	; 0x07
    167e:	00 81       	ld	r16, Z
    1680:	11 81       	ldd	r17, Z+1	; 0x01
    1682:	22 81       	ldd	r18, Z+2	; 0x02
    1684:	33 81       	ldd	r19, Z+3	; 0x03
    1686:	40 0f       	add	r20, r16
    1688:	51 1f       	adc	r21, r17
    168a:	62 1f       	adc	r22, r18
    168c:	73 1f       	adc	r23, r19
    168e:	40 83       	st	Z, r20
    1690:	51 83       	std	Z+1, r21	; 0x01
    1692:	62 83       	std	Z+2, r22	; 0x02
    1694:	73 83       	std	Z+3, r23	; 0x03
	char readTable()
	{
#ifdef OSCIL_DITHER_PHASE
		return (char)pgm_read_byte_near(table + (((phase_fractional + ((int)(xorshift96()>>16))) >> OSCIL_F_BITS) & (NUM_TABLE_CELLS - 1)));
#else
		return (char)pgm_read_byte_near(table + ((phase_fractional >> OSCIL_F_BITS) & (NUM_TABLE_CELLS - 1)));
    1696:	00 84       	ldd	r0, Z+8	; 0x08
    1698:	f1 85       	ldd	r31, Z+9	; 0x09
    169a:	e0 2d       	mov	r30, r0
    169c:	e6 0f       	add	r30, r22
    169e:	f1 1d       	adc	r31, r1
    16a0:	84 91       	lpm	r24, Z
	inline
	char next()
	{
		incrementPhase();
		return readTable();
	}
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	08 95       	ret

000016a8 <_ZN5OscilILj256ELj16384EE5phModEl>:
	*/
	// PM: cos((angle += incr) + change)
	// FM: cos(angle += (incr + change))
	// The ratio of deviation to modulation frequency is called the "index of modulation". ( I = d / Fm )
	inline
	char phMod(Q15n16 phmod_proportion)
    16a8:	cf 92       	push	r12
    16aa:	df 92       	push	r13
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	fc 01       	movw	r30, r24
	 */
	inline
	void incrementPhase()
	{
		//phase_fractional += (phase_increment_fractional | 1); // odd phase incr, attempt to reduce frequency spurs in output
		phase_fractional += phase_increment_fractional;
    16b6:	04 81       	ldd	r16, Z+4	; 0x04
    16b8:	15 81       	ldd	r17, Z+5	; 0x05
    16ba:	26 81       	ldd	r18, Z+6	; 0x06
    16bc:	37 81       	ldd	r19, Z+7	; 0x07
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	a2 81       	ldd	r26, Z+2	; 0x02
    16c4:	b3 81       	ldd	r27, Z+3	; 0x03
    16c6:	08 0f       	add	r16, r24
    16c8:	19 1f       	adc	r17, r25
    16ca:	2a 1f       	adc	r18, r26
    16cc:	3b 1f       	adc	r19, r27
    16ce:	00 83       	st	Z, r16
    16d0:	11 83       	std	Z+1, r17	; 0x01
    16d2:	22 83       	std	Z+2, r18	; 0x02
    16d4:	33 83       	std	Z+3, r19	; 0x03
	// The ratio of deviation to modulation frequency is called the "index of modulation". ( I = d / Fm )
	inline
	char phMod(Q15n16 phmod_proportion)
	{
		incrementPhase();
		return (char)pgm_read_byte_near(table + (((phase_fractional+(phmod_proportion * NUM_TABLE_CELLS))>>OSCIL_F_BITS) & (NUM_TABLE_CELLS - 1)));
    16d6:	cc 24       	eor	r12, r12
    16d8:	d4 2e       	mov	r13, r20
    16da:	e5 2e       	mov	r14, r21
    16dc:	f6 2e       	mov	r15, r22
    16de:	c0 0e       	add	r12, r16
    16e0:	d1 1e       	adc	r13, r17
    16e2:	e2 1e       	adc	r14, r18
    16e4:	f3 1e       	adc	r15, r19
    16e6:	00 84       	ldd	r0, Z+8	; 0x08
    16e8:	f1 85       	ldd	r31, Z+9	; 0x09
    16ea:	e0 2d       	mov	r30, r0
    16ec:	ee 0d       	add	r30, r14
    16ee:	f1 1d       	adc	r31, r1
    16f0:	84 91       	lpm	r24, Z
	}
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	08 95       	ret

00001700 <_Z11updateAudiov>:
	}
   
}
/** Mozzi updateAudio routine
	*/
int updateAudio(){
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	00 d0       	rcall	.+0      	; 0x171a <_Z11updateAudiov+0x1a>
    171a:	00 d0       	rcall	.+0      	; 0x171c <_Z11updateAudiov+0x1c>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62

	char Voice=0; // Voice
	
	// Dronesynth=0 || ByteCodePlayer
	if (PhonosynthMode == 0) {
    1720:	80 91 bc 03 	lds	r24, 0x03BC
    1724:	81 11       	cpse	r24, r1
    1726:	91 c0       	rjmp	.+290    	; 0x184a <_Z11updateAudiov+0x14a>
		
		if (FMModus==0){
    1728:	80 91 a8 03 	lds	r24, 0x03A8
    172c:	81 11       	cpse	r24, r1
    172e:	24 c0       	rjmp	.+72     	; 0x1778 <_Z11updateAudiov+0x78>
			// standard drone sound
			Voice = ((((oSaw1.next()*oLFO1.next())>>8)+((oSin1.next()*oLFO1.next())>>8)+((oSaw2.next()*oLFO1.next())>>8)));
    1730:	83 e9       	ldi	r24, 0x93	; 147
    1732:	93 e0       	ldi	r25, 0x03	; 3
    1734:	9d df       	rcall	.-198    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    1736:	f8 2e       	mov	r15, r24
    1738:	85 e7       	ldi	r24, 0x75	; 117
    173a:	93 e0       	ldi	r25, 0x03	; 3
    173c:	99 df       	rcall	.-206    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    173e:	08 2f       	mov	r16, r24
    1740:	8b e6       	ldi	r24, 0x6B	; 107
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	95 df       	rcall	.-214    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    1746:	18 2f       	mov	r17, r24
    1748:	85 e7       	ldi	r24, 0x75	; 117
    174a:	93 e0       	ldi	r25, 0x03	; 3
    174c:	91 df       	rcall	.-222    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    174e:	18 02       	muls	r17, r24
    1750:	c0 01       	movw	r24, r0
    1752:	11 24       	eor	r1, r1
    1754:	4f 2d       	mov	r20, r15
    1756:	40 02       	muls	r20, r16
    1758:	90 01       	movw	r18, r0
    175a:	11 24       	eor	r1, r1
    175c:	b9 2e       	mov	r11, r25
    175e:	b3 0e       	add	r11, r19
    1760:	89 e8       	ldi	r24, 0x89	; 137
    1762:	93 e0       	ldi	r25, 0x03	; 3
    1764:	85 df       	rcall	.-246    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    1766:	18 2f       	mov	r17, r24
    1768:	85 e7       	ldi	r24, 0x75	; 117
    176a:	93 e0       	ldi	r25, 0x03	; 3
    176c:	81 df       	rcall	.-254    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    176e:	18 02       	muls	r17, r24
    1770:	c0 01       	movw	r24, r0
    1772:	11 24       	eor	r1, r1
    1774:	b9 0e       	add	r11, r25
    1776:	3b c0       	rjmp	.+118    	; 0x17ee <_Z11updateAudiov+0xee>
			}
			
		if (FMModus==1){
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	c1 f5       	brne	.+112    	; 0x17ec <_Z11updateAudiov+0xec>
			// FM Modulation
			long modulation = fm_intensity * oSaw1.next();
    177c:	20 91 0e 01 	lds	r18, 0x010E
    1780:	30 91 0f 01 	lds	r19, 0x010F
    1784:	40 91 10 01 	lds	r20, 0x0110
    1788:	50 91 11 01 	lds	r21, 0x0111
    178c:	83 e9       	ldi	r24, 0x93	; 147
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	29 83       	std	Y+1, r18	; 0x01
    1792:	3a 83       	std	Y+2, r19	; 0x02
    1794:	4b 83       	std	Y+3, r20	; 0x03
    1796:	5c 83       	std	Y+4, r21	; 0x04
    1798:	6b df       	rcall	.-298    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    179a:	a8 2f       	mov	r26, r24
    179c:	bb 27       	eor	r27, r27
    179e:	a7 fd       	sbrc	r26, 7
    17a0:	b0 95       	com	r27
    17a2:	29 81       	ldd	r18, Y+1	; 0x01
    17a4:	3a 81       	ldd	r19, Y+2	; 0x02
    17a6:	4b 81       	ldd	r20, Y+3	; 0x03
    17a8:	5c 81       	ldd	r21, Y+4	; 0x04
    17aa:	b2 d2       	rcall	.+1380   	; 0x1d10 <__mulshisi3>
    17ac:	6b 01       	movw	r12, r22
    17ae:	7c 01       	movw	r14, r24
			Voice= ((Voice + (oLFO1.next()*(oSaw2.phMod(modulation)+oSaw3.phMod(modulation))>>8))); // phMod does the FM
    17b0:	85 e7       	ldi	r24, 0x75	; 117
    17b2:	93 e0       	ldi	r25, 0x03	; 3
    17b4:	5d df       	rcall	.-326    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    17b6:	18 2f       	mov	r17, r24
    17b8:	b7 01       	movw	r22, r14
    17ba:	a6 01       	movw	r20, r12
    17bc:	89 e8       	ldi	r24, 0x89	; 137
    17be:	93 e0       	ldi	r25, 0x03	; 3
    17c0:	73 df       	rcall	.-282    	; 0x16a8 <_ZN5OscilILj256ELj16384EE5phModEl>
    17c2:	08 2f       	mov	r16, r24
    17c4:	b7 01       	movw	r22, r14
    17c6:	a6 01       	movw	r20, r12
    17c8:	8f e7       	ldi	r24, 0x7F	; 127
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	6d df       	rcall	.-294    	; 0x16a8 <_ZN5OscilILj256ELj16384EE5phModEl>
    17ce:	28 2f       	mov	r18, r24
    17d0:	33 27       	eor	r19, r19
    17d2:	27 fd       	sbrc	r18, 7
    17d4:	30 95       	com	r19
    17d6:	20 0f       	add	r18, r16
    17d8:	31 1d       	adc	r19, r1
    17da:	07 fd       	sbrc	r16, 7
    17dc:	3a 95       	dec	r19
    17de:	12 03       	mulsu	r17, r18
    17e0:	a0 01       	movw	r20, r0
    17e2:	13 9f       	mul	r17, r19
    17e4:	50 0d       	add	r21, r0
    17e6:	11 24       	eor	r1, r1
    17e8:	b5 2e       	mov	r11, r21
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <_Z11updateAudiov+0xee>
}
/** Mozzi updateAudio routine
	*/
int updateAudio(){

	char Voice=0; // Voice
    17ec:	b1 2c       	mov	r11, r1
			// FM Modulation
			long modulation = fm_intensity * oSaw1.next();
			Voice= ((Voice + (oLFO1.next()*(oSaw2.phMod(modulation)+oSaw3.phMod(modulation))>>8))); // phMod does the FM
		}
		
		if (NoiseModus==1) {
    17ee:	80 91 af 03 	lds	r24, 0x03AF
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <_Z11updateAudiov+0xf8>
    17f6:	4f c0       	rjmp	.+158    	; 0x1896 <_Z11updateAudiov+0x196>
			// more Noise mode
			Voice = (Voice + (((oSaw1.next()+(oSin1.next()))>>1)+((oSin2.next()*oLFO1.next())>>8)))>>1;
    17f8:	83 e9       	ldi	r24, 0x93	; 147
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    17fc:	39 df       	rcall	.-398    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    17fe:	18 2f       	mov	r17, r24
    1800:	8b e6       	ldi	r24, 0x6B	; 107
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	35 df       	rcall	.-406    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    1806:	88 2e       	mov	r8, r24
    1808:	81 e6       	ldi	r24, 0x61	; 97
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	31 df       	rcall	.-414    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    180e:	08 2f       	mov	r16, r24
    1810:	85 e7       	ldi	r24, 0x75	; 117
    1812:	93 e0       	ldi	r25, 0x03	; 3
    1814:	2d df       	rcall	.-422    	; 0x1670 <_ZN5OscilILj256ELj16384EE4nextEv>
    1816:	99 24       	eor	r9, r9
    1818:	87 fc       	sbrc	r8, 7
    181a:	90 94       	com	r9
    181c:	81 0e       	add	r8, r17
    181e:	91 1c       	adc	r9, r1
    1820:	17 fd       	sbrc	r17, 7
    1822:	9a 94       	dec	r9
    1824:	95 94       	asr	r9
    1826:	87 94       	ror	r8
    1828:	08 02       	muls	r16, r24
    182a:	c0 01       	movw	r24, r0
    182c:	11 24       	eor	r1, r1
    182e:	29 2f       	mov	r18, r25
    1830:	33 27       	eor	r19, r19
    1832:	27 fd       	sbrc	r18, 7
    1834:	3a 95       	dec	r19
    1836:	82 0e       	add	r8, r18
    1838:	93 1e       	adc	r9, r19
    183a:	8b 0c       	add	r8, r11
    183c:	91 1c       	adc	r9, r1
    183e:	b7 fc       	sbrc	r11, 7
    1840:	9a 94       	dec	r9
    1842:	95 94       	asr	r9
    1844:	87 94       	ror	r8
    1846:	b8 2c       	mov	r11, r8
    1848:	26 c0       	rjmp	.+76     	; 0x1896 <_Z11updateAudiov+0x196>
		}
			
	} else {  // ByteBeat Modus
	 // increase time
	 t++; 
    184a:	20 91 9e 03 	lds	r18, 0x039E
    184e:	30 91 9f 03 	lds	r19, 0x039F
    1852:	40 91 a0 03 	lds	r20, 0x03A0
    1856:	50 91 a1 03 	lds	r21, 0x03A1
    185a:	60 91 a2 03 	lds	r22, 0x03A2
    185e:	70 91 a3 03 	lds	r23, 0x03A3
    1862:	80 91 a4 03 	lds	r24, 0x03A4
    1866:	90 91 a5 03 	lds	r25, 0x03A5
    186a:	a1 e0       	ldi	r26, 0x01	; 1
    186c:	12 d3       	rcall	.+1572   	; 0x1e92 <__adddi3_s8>
    186e:	20 93 9e 03 	sts	0x039E, r18
    1872:	30 93 9f 03 	sts	0x039F, r19
    1876:	40 93 a0 03 	sts	0x03A0, r20
    187a:	50 93 a1 03 	sts	0x03A1, r21
    187e:	60 93 a2 03 	sts	0x03A2, r22
    1882:	70 93 a3 03 	sts	0x03A3, r23
    1886:	80 93 a4 03 	sts	0x03A4, r24
    188a:	90 93 a5 03 	sts	0x03A5, r25
	 
	 // gets ByteBeatSample 
	 Voice=getByteBeat(BytecodeSel);
    188e:	80 91 b2 03 	lds	r24, 0x03B2
    1892:	5e d8       	rcall	.-3908   	; 0x950 <_Z11getByteBeath>
    1894:	b8 2e       	mov	r11, r24
	}
	
	// LowPassFilter on/off depends on buttons S2 push
	if (LPFByPass == 1) {
    1896:	80 91 bd 03 	lds	r24, 0x03BD
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	09 f0       	breq	.+2      	; 0x18a0 <_Z11updateAudiov+0x1a0>
    189e:	50 c0       	rjmp	.+160    	; 0x1940 <_Z11updateAudiov+0x240>
	//	10.5 to 12.5 us, mostly 10.5 us (was 14us)
	inline
	int next(int in)
	{
		//setPin13High();
		buf0+=fxmul(((in - buf0) + fxmul(fb, buf0-buf1)), f);
    18a0:	10 91 50 03 	lds	r17, 0x0350
    18a4:	40 91 53 03 	lds	r20, 0x0353
    18a8:	50 91 54 03 	lds	r21, 0x0354
    18ac:	e0 91 55 03 	lds	r30, 0x0355
    18b0:	f0 91 56 03 	lds	r31, 0x0356
    18b4:	da 01       	movw	r26, r20
    18b6:	ae 1b       	sub	r26, r30
    18b8:	bf 0b       	sbc	r27, r31
    18ba:	20 91 51 03 	lds	r18, 0x0351
    18be:	30 91 52 03 	lds	r19, 0x0352
    18c2:	6a 01       	movw	r12, r20
    18c4:	ee 24       	eor	r14, r14
    18c6:	d7 fc       	sbrc	r13, 7
    18c8:	e0 94       	com	r14
    18ca:	fe 2c       	mov	r15, r14
		Voice = lpf.next(Voice);
    18cc:	8b 2c       	mov	r8, r11
    18ce:	99 24       	eor	r9, r9
    18d0:	87 fc       	sbrc	r8, 7
    18d2:	90 94       	com	r9
    18d4:	84 1a       	sub	r8, r20
    18d6:	95 0a       	sbc	r9, r21
    18d8:	aa 24       	eor	r10, r10
    18da:	97 fc       	sbrc	r9, 7
    18dc:	a0 94       	com	r10
    18de:	ba 2c       	mov	r11, r10
	
	// multiply two fixed point numbers (returns fixed point)
	inline
	long fxmul(long a, int b)
	{
		return ((a*b)>>FX_SHIFT);
    18e0:	07 d2       	rcall	.+1038   	; 0x1cf0 <__usmulhisi3>
    18e2:	bb 27       	eor	r27, r27
    18e4:	97 fd       	sbrc	r25, 7
    18e6:	ba 95       	dec	r27
    18e8:	a9 2f       	mov	r26, r25
    18ea:	98 2f       	mov	r25, r24
    18ec:	87 2f       	mov	r24, r23
	//	10.5 to 12.5 us, mostly 10.5 us (was 14us)
	inline
	int next(int in)
	{
		//setPin13High();
		buf0+=fxmul(((in - buf0) + fxmul(fb, buf0-buf1)), f);
    18ee:	88 0e       	add	r8, r24
    18f0:	99 1e       	adc	r9, r25
    18f2:	aa 1e       	adc	r10, r26
    18f4:	bb 1e       	adc	r11, r27
	
	// multiply two fixed point numbers (returns fixed point)
	inline
	long fxmul(long a, int b)
	{
		return ((a*b)>>FX_SHIFT);
    18f6:	a1 2f       	mov	r26, r17
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	a5 01       	movw	r20, r10
    18fc:	94 01       	movw	r18, r8
    18fe:	fe d1       	rcall	.+1020   	; 0x1cfc <__muluhisi3>
    1900:	bb 27       	eor	r27, r27
    1902:	97 fd       	sbrc	r25, 7
    1904:	ba 95       	dec	r27
    1906:	a9 2f       	mov	r26, r25
    1908:	98 2f       	mov	r25, r24
    190a:	87 2f       	mov	r24, r23
	//	10.5 to 12.5 us, mostly 10.5 us (was 14us)
	inline
	int next(int in)
	{
		//setPin13High();
		buf0+=fxmul(((in - buf0) + fxmul(fb, buf0-buf1)), f);
    190c:	c8 0e       	add	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	ea 1e       	adc	r14, r26
    1912:	fb 1e       	adc	r15, r27
    1914:	96 01       	movw	r18, r12
    1916:	d0 92 54 03 	sts	0x0354, r13
    191a:	c0 92 53 03 	sts	0x0353, r12
		buf1+=ifxmul(buf0-buf1, f); // could overflow if input changes fast
    191e:	2e 1b       	sub	r18, r30
    1920:	3f 0b       	sbc	r19, r31
	
		// multiply two fixed point numbers (returns fixed point)
	inline
	int ifxmul(int a, unsigned char b)
	{
		return ((a*b)>>FX_SHIFT);
    1922:	12 9f       	mul	r17, r18
    1924:	c0 01       	movw	r24, r0
    1926:	13 9f       	mul	r17, r19
    1928:	90 0d       	add	r25, r0
    192a:	11 24       	eor	r1, r1
    192c:	89 2f       	mov	r24, r25
    192e:	99 0f       	add	r25, r25
    1930:	99 0b       	sbc	r25, r25
	inline
	int next(int in)
	{
		//setPin13High();
		buf0+=fxmul(((in - buf0) + fxmul(fb, buf0-buf1)), f);
		buf1+=ifxmul(buf0-buf1, f); // could overflow if input changes fast
    1932:	8e 0f       	add	r24, r30
    1934:	9f 1f       	adc	r25, r31
    1936:	90 93 56 03 	sts	0x0356, r25
    193a:	80 93 55 03 	sts	0x0355, r24
    193e:	b8 2e       	mov	r11, r24
	}
	
	// mute (multiplier 0/1) depends on buttons S1 push
	return (Voice*MutePhonosynth);
    1940:	80 91 14 01 	lds	r24, 0x0114
    1944:	9b 2d       	mov	r25, r11
    1946:	98 02       	muls	r25, r24
    1948:	40 01       	movw	r8, r0
    194a:	11 24       	eor	r1, r1
    194c:	c4 01       	movw	r24, r8
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	bf 90       	pop	r11
    1968:	af 90       	pop	r10
    196a:	9f 90       	pop	r9
    196c:	8f 90       	pop	r8
    196e:	08 95       	ret

00001970 <_GLOBAL__sub_I_oSaw1>:
	/** Constructor.
	@param TABLE_NAME the name of the array the Oscil will be using. This
	can be found in the table ".h" file if you are using a table made for
	Mozzi by the char2mozzi.py python script in Mozzi's python
	folder.*/
	Oscil(const char * TABLE_NAME):table(TABLE_NAME)
    1970:	85 e6       	ldi	r24, 0x65	; 101
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	90 93 9c 03 	sts	0x039C, r25
    1978:	80 93 9b 03 	sts	0x039B, r24
    197c:	90 93 92 03 	sts	0x0392, r25
    1980:	80 93 91 03 	sts	0x0391, r24
    1984:	90 93 88 03 	sts	0x0388, r25
    1988:	80 93 87 03 	sts	0x0387, r24
    198c:	85 e6       	ldi	r24, 0x65	; 101
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	90 93 7e 03 	sts	0x037E, r25
    1994:	80 93 7d 03 	sts	0x037D, r24
    1998:	90 93 74 03 	sts	0x0374, r25
    199c:	80 93 73 03 	sts	0x0373, r24
    19a0:	90 93 6a 03 	sts	0x036A, r25
    19a4:	80 93 69 03 	sts	0x0369, r24
    19a8:	90 93 60 03 	sts	0x0360, r25
    19ac:	80 93 5f 03 	sts	0x035F, r24
    19b0:	08 95       	ret

000019b2 <main>:
    19b2:	5c d0       	rcall	.+184    	; 0x1a6c <init>
    19b4:	d1 dc       	rcall	.-1630   	; 0x1358 <setup>
    19b6:	c0 e0       	ldi	r28, 0x00	; 0
    19b8:	d0 e0       	ldi	r29, 0x00	; 0
    19ba:	b5 dc       	rcall	.-1686   	; 0x1326 <loop>
    19bc:	20 97       	sbiw	r28, 0x00	; 0
    19be:	e9 f3       	breq	.-6      	; 0x19ba <main+0x8>
    19c0:	1f d3       	rcall	.+1598   	; 0x2000 <__data_load_end+0x82>
    19c2:	fb cf       	rjmp	.-10     	; 0x19ba <main+0x8>

000019c4 <__vector_16>:
    19c4:	1f 92       	push	r1
    19c6:	0f 92       	push	r0
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	0f 92       	push	r0
    19cc:	11 24       	eor	r1, r1
    19ce:	2f 93       	push	r18
    19d0:	3f 93       	push	r19
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	af 93       	push	r26
    19d8:	bf 93       	push	r27
    19da:	80 91 bf 03 	lds	r24, 0x03BF
    19de:	90 91 c0 03 	lds	r25, 0x03C0
    19e2:	a0 91 c1 03 	lds	r26, 0x03C1
    19e6:	b0 91 c2 03 	lds	r27, 0x03C2
    19ea:	30 91 c7 03 	lds	r19, 0x03C7
    19ee:	23 2f       	mov	r18, r19
    19f0:	2a 5f       	subi	r18, 0xFA	; 250
    19f2:	2d 37       	cpi	r18, 0x7D	; 125
    19f4:	20 f4       	brcc	.+8      	; 0x19fe <__vector_16+0x3a>
    19f6:	02 96       	adiw	r24, 0x02	; 2
    19f8:	a1 1d       	adc	r26, r1
    19fa:	b1 1d       	adc	r27, r1
    19fc:	05 c0       	rjmp	.+10     	; 0x1a08 <__vector_16+0x44>
    19fe:	23 2f       	mov	r18, r19
    1a00:	27 57       	subi	r18, 0x77	; 119
    1a02:	03 96       	adiw	r24, 0x03	; 3
    1a04:	a1 1d       	adc	r26, r1
    1a06:	b1 1d       	adc	r27, r1
    1a08:	20 93 c7 03 	sts	0x03C7, r18
    1a0c:	80 93 bf 03 	sts	0x03BF, r24
    1a10:	90 93 c0 03 	sts	0x03C0, r25
    1a14:	a0 93 c1 03 	sts	0x03C1, r26
    1a18:	b0 93 c2 03 	sts	0x03C2, r27
    1a1c:	80 91 c3 03 	lds	r24, 0x03C3
    1a20:	90 91 c4 03 	lds	r25, 0x03C4
    1a24:	a0 91 c5 03 	lds	r26, 0x03C5
    1a28:	b0 91 c6 03 	lds	r27, 0x03C6
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	a1 1d       	adc	r26, r1
    1a30:	b1 1d       	adc	r27, r1
    1a32:	80 93 c3 03 	sts	0x03C3, r24
    1a36:	90 93 c4 03 	sts	0x03C4, r25
    1a3a:	a0 93 c5 03 	sts	0x03C5, r26
    1a3e:	b0 93 c6 03 	sts	0x03C6, r27
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	3f 91       	pop	r19
    1a4c:	2f 91       	pop	r18
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	0f 90       	pop	r0
    1a54:	1f 90       	pop	r1
    1a56:	18 95       	reti

00001a58 <delayMicroseconds>:
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	39 f0       	breq	.+14     	; 0x1a6a <delayMicroseconds+0x12>
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <delayMicroseconds+0x12>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <delayMicroseconds+0xe>
    1a6a:	08 95       	ret

00001a6c <init>:
    1a6c:	78 94       	sei
    1a6e:	84 b5       	in	r24, 0x24	; 36
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	84 bd       	out	0x24, r24	; 36
    1a74:	84 b5       	in	r24, 0x24	; 36
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	84 bd       	out	0x24, r24	; 36
    1a7a:	85 b5       	in	r24, 0x25	; 37
    1a7c:	82 60       	ori	r24, 0x02	; 2
    1a7e:	85 bd       	out	0x25, r24	; 37
    1a80:	85 b5       	in	r24, 0x25	; 37
    1a82:	81 60       	ori	r24, 0x01	; 1
    1a84:	85 bd       	out	0x25, r24	; 37
    1a86:	ee e6       	ldi	r30, 0x6E	; 110
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	80 83       	st	Z, r24
    1a90:	e1 e8       	ldi	r30, 0x81	; 129
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	10 82       	st	Z, r1
    1a96:	80 81       	ld	r24, Z
    1a98:	82 60       	ori	r24, 0x02	; 2
    1a9a:	80 83       	st	Z, r24
    1a9c:	80 81       	ld	r24, Z
    1a9e:	81 60       	ori	r24, 0x01	; 1
    1aa0:	80 83       	st	Z, r24
    1aa2:	e0 e8       	ldi	r30, 0x80	; 128
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	81 60       	ori	r24, 0x01	; 1
    1aaa:	80 83       	st	Z, r24
    1aac:	e1 eb       	ldi	r30, 0xB1	; 177
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	84 60       	ori	r24, 0x04	; 4
    1ab4:	80 83       	st	Z, r24
    1ab6:	e0 eb       	ldi	r30, 0xB0	; 176
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	81 60       	ori	r24, 0x01	; 1
    1abe:	80 83       	st	Z, r24
    1ac0:	ea e7       	ldi	r30, 0x7A	; 122
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	84 60       	ori	r24, 0x04	; 4
    1ac8:	80 83       	st	Z, r24
    1aca:	80 81       	ld	r24, Z
    1acc:	82 60       	ori	r24, 0x02	; 2
    1ace:	80 83       	st	Z, r24
    1ad0:	80 81       	ld	r24, Z
    1ad2:	81 60       	ori	r24, 0x01	; 1
    1ad4:	80 83       	st	Z, r24
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 68       	ori	r24, 0x80	; 128
    1ada:	80 83       	st	Z, r24
    1adc:	10 92 c1 00 	sts	0x00C1, r1
    1ae0:	08 95       	ret

00001ae2 <turnOffPWM>:
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	69 f0       	breq	.+26     	; 0x1b00 <turnOffPWM+0x1e>
    1ae6:	28 f4       	brcc	.+10     	; 0x1af2 <turnOffPWM+0x10>
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	a1 f0       	breq	.+40     	; 0x1b14 <turnOffPWM+0x32>
    1aec:	82 30       	cpi	r24, 0x02	; 2
    1aee:	11 f5       	brne	.+68     	; 0x1b34 <turnOffPWM+0x52>
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <turnOffPWM+0x38>
    1af2:	86 30       	cpi	r24, 0x06	; 6
    1af4:	b1 f0       	breq	.+44     	; 0x1b22 <turnOffPWM+0x40>
    1af6:	87 30       	cpi	r24, 0x07	; 7
    1af8:	c1 f0       	breq	.+48     	; 0x1b2a <turnOffPWM+0x48>
    1afa:	84 30       	cpi	r24, 0x04	; 4
    1afc:	d9 f4       	brne	.+54     	; 0x1b34 <turnOffPWM+0x52>
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <turnOffPWM+0x26>
    1b00:	80 91 80 00 	lds	r24, 0x0080
    1b04:	8f 77       	andi	r24, 0x7F	; 127
    1b06:	03 c0       	rjmp	.+6      	; 0x1b0e <turnOffPWM+0x2c>
    1b08:	80 91 80 00 	lds	r24, 0x0080
    1b0c:	8f 7d       	andi	r24, 0xDF	; 223
    1b0e:	80 93 80 00 	sts	0x0080, r24
    1b12:	08 95       	ret
    1b14:	84 b5       	in	r24, 0x24	; 36
    1b16:	8f 77       	andi	r24, 0x7F	; 127
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <turnOffPWM+0x3c>
    1b1a:	84 b5       	in	r24, 0x24	; 36
    1b1c:	8f 7d       	andi	r24, 0xDF	; 223
    1b1e:	84 bd       	out	0x24, r24	; 36
    1b20:	08 95       	ret
    1b22:	80 91 b0 00 	lds	r24, 0x00B0
    1b26:	8f 77       	andi	r24, 0x7F	; 127
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <turnOffPWM+0x4e>
    1b2a:	80 91 b0 00 	lds	r24, 0x00B0
    1b2e:	8f 7d       	andi	r24, 0xDF	; 223
    1b30:	80 93 b0 00 	sts	0x00B0, r24
    1b34:	08 95       	ret

00001b36 <pinMode>:
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	e7 58       	subi	r30, 0x87	; 135
    1b40:	fd 4f       	sbci	r31, 0xFD	; 253
    1b42:	44 91       	lpm	r20, Z
    1b44:	fc 01       	movw	r30, r24
    1b46:	e3 57       	subi	r30, 0x73	; 115
    1b48:	fd 4f       	sbci	r31, 0xFD	; 253
    1b4a:	84 91       	lpm	r24, Z
    1b4c:	88 23       	and	r24, r24
    1b4e:	41 f1       	breq	.+80     	; 0x1ba0 <pinMode+0x6a>
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	fc 01       	movw	r30, r24
    1b58:	eb 54       	subi	r30, 0x4B	; 75
    1b5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5c:	25 91       	lpm	r18, Z+
    1b5e:	34 91       	lpm	r19, Z
    1b60:	d9 01       	movw	r26, r18
    1b62:	85 55       	subi	r24, 0x55	; 85
    1b64:	9d 4f       	sbci	r25, 0xFD	; 253
    1b66:	fc 01       	movw	r30, r24
    1b68:	85 91       	lpm	r24, Z+
    1b6a:	94 91       	lpm	r25, Z
    1b6c:	c8 2f       	mov	r28, r24
    1b6e:	d9 2f       	mov	r29, r25
    1b70:	9f b7       	in	r25, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	8c 91       	ld	r24, X
    1b76:	61 11       	cpse	r22, r1
    1b78:	06 c0       	rjmp	.+12     	; 0x1b86 <pinMode+0x50>
    1b7a:	40 95       	com	r20
    1b7c:	84 23       	and	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	88 81       	ld	r24, Y
    1b82:	84 23       	and	r24, r20
    1b84:	08 c0       	rjmp	.+16     	; 0x1b96 <pinMode+0x60>
    1b86:	62 30       	cpi	r22, 0x02	; 2
    1b88:	41 f4       	brne	.+16     	; 0x1b9a <pinMode+0x64>
    1b8a:	24 2f       	mov	r18, r20
    1b8c:	20 95       	com	r18
    1b8e:	82 23       	and	r24, r18
    1b90:	8c 93       	st	X, r24
    1b92:	88 81       	ld	r24, Y
    1b94:	84 2b       	or	r24, r20
    1b96:	88 83       	st	Y, r24
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <pinMode+0x68>
    1b9a:	84 2b       	or	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	9f bf       	out	0x3f, r25	; 63
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <digitalWrite>:
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	1f 92       	push	r1
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	f9 01       	movw	r30, r18
    1bba:	eb 59       	subi	r30, 0x9B	; 155
    1bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bbe:	84 91       	lpm	r24, Z
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	e7 58       	subi	r30, 0x87	; 135
    1bc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc6:	14 91       	lpm	r17, Z
    1bc8:	f9 01       	movw	r30, r18
    1bca:	e3 57       	subi	r30, 0x73	; 115
    1bcc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bce:	04 91       	lpm	r16, Z
    1bd0:	00 23       	and	r16, r16
    1bd2:	c9 f0       	breq	.+50     	; 0x1c06 <digitalWrite+0x60>
    1bd4:	88 23       	and	r24, r24
    1bd6:	19 f0       	breq	.+6      	; 0x1bde <digitalWrite+0x38>
    1bd8:	69 83       	std	Y+1, r22	; 0x01
    1bda:	83 df       	rcall	.-250    	; 0x1ae2 <turnOffPWM>
    1bdc:	69 81       	ldd	r22, Y+1	; 0x01
    1bde:	e0 2f       	mov	r30, r16
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	e5 55       	subi	r30, 0x55	; 85
    1be8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bea:	85 91       	lpm	r24, Z+
    1bec:	94 91       	lpm	r25, Z
    1bee:	dc 01       	movw	r26, r24
    1bf0:	9f b7       	in	r25, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	8c 91       	ld	r24, X
    1bf6:	61 11       	cpse	r22, r1
    1bf8:	03 c0       	rjmp	.+6      	; 0x1c00 <digitalWrite+0x5a>
    1bfa:	10 95       	com	r17
    1bfc:	81 23       	and	r24, r17
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <digitalWrite+0x5c>
    1c00:	81 2b       	or	r24, r17
    1c02:	8c 93       	st	X, r24
    1c04:	9f bf       	out	0x3f, r25	; 63
    1c06:	0f 90       	pop	r0
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	08 95       	ret

00001c12 <digitalRead>:
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	f9 01       	movw	r30, r18
    1c1c:	eb 59       	subi	r30, 0x9B	; 155
    1c1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c20:	84 91       	lpm	r24, Z
    1c22:	f9 01       	movw	r30, r18
    1c24:	e7 58       	subi	r30, 0x87	; 135
    1c26:	fd 4f       	sbci	r31, 0xFD	; 253
    1c28:	d4 91       	lpm	r29, Z
    1c2a:	f9 01       	movw	r30, r18
    1c2c:	e3 57       	subi	r30, 0x73	; 115
    1c2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c30:	c4 91       	lpm	r28, Z
    1c32:	cc 23       	and	r28, r28
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <digitalRead+0x44>
    1c36:	81 11       	cpse	r24, r1
    1c38:	54 df       	rcall	.-344    	; 0x1ae2 <turnOffPWM>
    1c3a:	ec 2f       	mov	r30, r28
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	ee 0f       	add	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	ef 55       	subi	r30, 0x5F	; 95
    1c44:	fd 4f       	sbci	r31, 0xFD	; 253
    1c46:	85 91       	lpm	r24, Z+
    1c48:	94 91       	lpm	r25, Z
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	8c 91       	ld	r24, X
    1c4e:	8d 23       	and	r24, r29
    1c50:	21 e0       	ldi	r18, 0x01	; 1
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <digitalRead+0x48>
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <__divmodqi4>:
    1c62:	87 fb       	bst	r24, 7
    1c64:	08 2e       	mov	r0, r24
    1c66:	06 26       	eor	r0, r22
    1c68:	87 fd       	sbrc	r24, 7
    1c6a:	81 95       	neg	r24
    1c6c:	67 fd       	sbrc	r22, 7
    1c6e:	61 95       	neg	r22
    1c70:	31 d1       	rcall	.+610    	; 0x1ed4 <__udivmodqi4>
    1c72:	0e f4       	brtc	.+2      	; 0x1c76 <__divmodqi4_1>
    1c74:	91 95       	neg	r25

00001c76 <__divmodqi4_1>:
    1c76:	07 fc       	sbrc	r0, 7
    1c78:	81 95       	neg	r24

00001c7a <__divmodqi4_exit>:
    1c7a:	08 95       	ret

00001c7c <__divmodhi4>:
    1c7c:	97 fb       	bst	r25, 7
    1c7e:	07 2e       	mov	r0, r23
    1c80:	16 f4       	brtc	.+4      	; 0x1c86 <__divmodhi4+0xa>
    1c82:	00 94       	com	r0
    1c84:	06 d0       	rcall	.+12     	; 0x1c92 <__divmodhi4_neg1>
    1c86:	77 fd       	sbrc	r23, 7
    1c88:	08 d0       	rcall	.+16     	; 0x1c9a <__divmodhi4_neg2>
    1c8a:	30 d1       	rcall	.+608    	; 0x1eec <__udivmodhi4>
    1c8c:	07 fc       	sbrc	r0, 7
    1c8e:	05 d0       	rcall	.+10     	; 0x1c9a <__divmodhi4_neg2>
    1c90:	3e f4       	brtc	.+14     	; 0x1ca0 <__divmodhi4_exit>

00001c92 <__divmodhi4_neg1>:
    1c92:	90 95       	com	r25
    1c94:	81 95       	neg	r24
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	08 95       	ret

00001c9a <__divmodhi4_neg2>:
    1c9a:	70 95       	com	r23
    1c9c:	61 95       	neg	r22
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255

00001ca0 <__divmodhi4_exit>:
    1ca0:	08 95       	ret

00001ca2 <__divmodsi4>:
    1ca2:	05 2e       	mov	r0, r21
    1ca4:	97 fb       	bst	r25, 7
    1ca6:	16 f4       	brtc	.+4      	; 0x1cac <__divmodsi4+0xa>
    1ca8:	00 94       	com	r0
    1caa:	06 d0       	rcall	.+12     	; 0x1cb8 <__divmodsi4_neg1>
    1cac:	57 fd       	sbrc	r21, 7
    1cae:	0c d0       	rcall	.+24     	; 0x1cc8 <__divmodsi4_neg2>
    1cb0:	31 d1       	rcall	.+610    	; 0x1f14 <__udivmodsi4>
    1cb2:	07 fc       	sbrc	r0, 7
    1cb4:	09 d0       	rcall	.+18     	; 0x1cc8 <__divmodsi4_neg2>
    1cb6:	7e f4       	brtc	.+30     	; 0x1cd6 <__divmodsi4_exit>

00001cb8 <__divmodsi4_neg1>:
    1cb8:	90 95       	com	r25
    1cba:	80 95       	com	r24
    1cbc:	70 95       	com	r23
    1cbe:	61 95       	neg	r22
    1cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	08 95       	ret

00001cc8 <__divmodsi4_neg2>:
    1cc8:	50 95       	com	r21
    1cca:	40 95       	com	r20
    1ccc:	30 95       	com	r19
    1cce:	21 95       	neg	r18
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	4f 4f       	sbci	r20, 0xFF	; 255
    1cd4:	5f 4f       	sbci	r21, 0xFF	; 255

00001cd6 <__divmodsi4_exit>:
    1cd6:	08 95       	ret

00001cd8 <__umulhisi3>:
    1cd8:	a2 9f       	mul	r26, r18
    1cda:	b0 01       	movw	r22, r0
    1cdc:	b3 9f       	mul	r27, r19
    1cde:	c0 01       	movw	r24, r0
    1ce0:	a3 9f       	mul	r26, r19
    1ce2:	01 d0       	rcall	.+2      	; 0x1ce6 <__umulhisi3+0xe>
    1ce4:	b2 9f       	mul	r27, r18
    1ce6:	70 0d       	add	r23, r0
    1ce8:	81 1d       	adc	r24, r1
    1cea:	11 24       	eor	r1, r1
    1cec:	91 1d       	adc	r25, r1
    1cee:	08 95       	ret

00001cf0 <__usmulhisi3>:
    1cf0:	f3 df       	rcall	.-26     	; 0x1cd8 <__umulhisi3>

00001cf2 <__usmulhisi3_tail>:
    1cf2:	b7 ff       	sbrs	r27, 7
    1cf4:	08 95       	ret
    1cf6:	82 1b       	sub	r24, r18
    1cf8:	93 0b       	sbc	r25, r19
    1cfa:	08 95       	ret

00001cfc <__muluhisi3>:
    1cfc:	ed df       	rcall	.-38     	; 0x1cd8 <__umulhisi3>
    1cfe:	a5 9f       	mul	r26, r21
    1d00:	90 0d       	add	r25, r0
    1d02:	b4 9f       	mul	r27, r20
    1d04:	90 0d       	add	r25, r0
    1d06:	a4 9f       	mul	r26, r20
    1d08:	80 0d       	add	r24, r0
    1d0a:	91 1d       	adc	r25, r1
    1d0c:	11 24       	eor	r1, r1
    1d0e:	08 95       	ret

00001d10 <__mulshisi3>:
    1d10:	b7 ff       	sbrs	r27, 7
    1d12:	f4 cf       	rjmp	.-24     	; 0x1cfc <__muluhisi3>

00001d14 <__mulohisi3>:
    1d14:	f3 df       	rcall	.-26     	; 0x1cfc <__muluhisi3>
    1d16:	82 1b       	sub	r24, r18
    1d18:	93 0b       	sbc	r25, r19
    1d1a:	08 95       	ret

00001d1c <__umoddi3>:
    1d1c:	68 94       	set
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <__udivdi3_umoddi3>

00001d20 <__udivdi3>:
    1d20:	e8 94       	clt

00001d22 <__udivdi3_umoddi3>:
    1d22:	8f 92       	push	r8
    1d24:	9f 92       	push	r9
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	56 d0       	rcall	.+172    	; 0x1dd8 <__udivmod64>
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	9f 90       	pop	r9
    1d32:	8f 90       	pop	r8
    1d34:	08 95       	ret

00001d36 <__muldi3>:
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	1f 93       	push	r17
    1d3c:	0f 93       	push	r16
    1d3e:	9a 9d       	mul	r25, r10
    1d40:	f0 2d       	mov	r31, r0
    1d42:	21 9f       	mul	r18, r17
    1d44:	f0 0d       	add	r31, r0
    1d46:	8b 9d       	mul	r24, r11
    1d48:	f0 0d       	add	r31, r0
    1d4a:	8a 9d       	mul	r24, r10
    1d4c:	e0 2d       	mov	r30, r0
    1d4e:	f1 0d       	add	r31, r1
    1d50:	03 9f       	mul	r16, r19
    1d52:	f0 0d       	add	r31, r0
    1d54:	02 9f       	mul	r16, r18
    1d56:	e0 0d       	add	r30, r0
    1d58:	f1 1d       	adc	r31, r1
    1d5a:	4e 9d       	mul	r20, r14
    1d5c:	e0 0d       	add	r30, r0
    1d5e:	f1 1d       	adc	r31, r1
    1d60:	5e 9d       	mul	r21, r14
    1d62:	f0 0d       	add	r31, r0
    1d64:	4f 9d       	mul	r20, r15
    1d66:	f0 0d       	add	r31, r0
    1d68:	7f 93       	push	r23
    1d6a:	6f 93       	push	r22
    1d6c:	bf 92       	push	r11
    1d6e:	af 92       	push	r10
    1d70:	5f 93       	push	r21
    1d72:	4f 93       	push	r20
    1d74:	d5 01       	movw	r26, r10
    1d76:	b0 df       	rcall	.-160    	; 0x1cd8 <__umulhisi3>
    1d78:	8b 01       	movw	r16, r22
    1d7a:	ac 01       	movw	r20, r24
    1d7c:	d7 01       	movw	r26, r14
    1d7e:	ac df       	rcall	.-168    	; 0x1cd8 <__umulhisi3>
    1d80:	eb 01       	movw	r28, r22
    1d82:	e8 0f       	add	r30, r24
    1d84:	f9 1f       	adc	r31, r25
    1d86:	d6 01       	movw	r26, r12
    1d88:	1f d0       	rcall	.+62     	; 0x1dc8 <__muldi3_6>
    1d8a:	2f 91       	pop	r18
    1d8c:	3f 91       	pop	r19
    1d8e:	d6 01       	movw	r26, r12
    1d90:	a3 df       	rcall	.-186    	; 0x1cd8 <__umulhisi3>
    1d92:	c6 0f       	add	r28, r22
    1d94:	d7 1f       	adc	r29, r23
    1d96:	e8 1f       	adc	r30, r24
    1d98:	f9 1f       	adc	r31, r25
    1d9a:	af 91       	pop	r26
    1d9c:	bf 91       	pop	r27
    1d9e:	14 d0       	rcall	.+40     	; 0x1dc8 <__muldi3_6>
    1da0:	2f 91       	pop	r18
    1da2:	3f 91       	pop	r19
    1da4:	99 df       	rcall	.-206    	; 0x1cd8 <__umulhisi3>
    1da6:	c6 0f       	add	r28, r22
    1da8:	d7 1f       	adc	r29, r23
    1daa:	e8 1f       	adc	r30, r24
    1dac:	f9 1f       	adc	r31, r25
    1dae:	d6 01       	movw	r26, r12
    1db0:	93 df       	rcall	.-218    	; 0x1cd8 <__umulhisi3>
    1db2:	e6 0f       	add	r30, r22
    1db4:	f7 1f       	adc	r31, r23
    1db6:	98 01       	movw	r18, r16
    1db8:	be 01       	movw	r22, r28
    1dba:	cf 01       	movw	r24, r30
    1dbc:	11 24       	eor	r1, r1
    1dbe:	0f 91       	pop	r16
    1dc0:	1f 91       	pop	r17
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <__muldi3_6>:
    1dc8:	87 df       	rcall	.-242    	; 0x1cd8 <__umulhisi3>
    1dca:	46 0f       	add	r20, r22
    1dcc:	57 1f       	adc	r21, r23
    1dce:	c8 1f       	adc	r28, r24
    1dd0:	d9 1f       	adc	r29, r25
    1dd2:	08 f4       	brcc	.+2      	; 0x1dd6 <__muldi3_6+0xe>
    1dd4:	31 96       	adiw	r30, 0x01	; 1
    1dd6:	08 95       	ret

00001dd8 <__udivmod64>:
    1dd8:	88 24       	eor	r8, r8
    1dda:	99 24       	eor	r9, r9
    1ddc:	f4 01       	movw	r30, r8
    1dde:	e4 01       	movw	r28, r8
    1de0:	b0 e4       	ldi	r27, 0x40	; 64
    1de2:	1b 2e       	mov	r1, r27
    1de4:	d4 01       	movw	r26, r8
    1de6:	9d 15       	cp	r25, r13
    1de8:	8e 04       	cpc	r8, r14
    1dea:	9f 04       	cpc	r9, r15
    1dec:	e0 07       	cpc	r30, r16
    1dee:	f1 07       	cpc	r31, r17
    1df0:	38 f4       	brcc	.+14     	; 0x1e00 <__udivmod64+0x28>
    1df2:	fc 01       	movw	r30, r24
    1df4:	4b 01       	movw	r8, r22
    1df6:	ca 01       	movw	r24, r20
    1df8:	b9 01       	movw	r22, r18
    1dfa:	ad 01       	movw	r20, r26
    1dfc:	9e 01       	movw	r18, r28
    1dfe:	16 94       	lsr	r1
    1e00:	22 0f       	add	r18, r18
    1e02:	33 1f       	adc	r19, r19
    1e04:	44 1f       	adc	r20, r20
    1e06:	55 1f       	adc	r21, r21
    1e08:	66 1f       	adc	r22, r22
    1e0a:	77 1f       	adc	r23, r23
    1e0c:	88 1f       	adc	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	88 1c       	adc	r8, r8
    1e12:	99 1c       	adc	r9, r9
    1e14:	ee 1f       	adc	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	cc 1f       	adc	r28, r28
    1e1a:	dd 1f       	adc	r29, r29
    1e1c:	aa 1f       	adc	r26, r26
    1e1e:	bb 1f       	adc	r27, r27
    1e20:	8a 14       	cp	r8, r10
    1e22:	9b 04       	cpc	r9, r11
    1e24:	ec 05       	cpc	r30, r12
    1e26:	fd 05       	cpc	r31, r13
    1e28:	ce 05       	cpc	r28, r14
    1e2a:	df 05       	cpc	r29, r15
    1e2c:	a0 07       	cpc	r26, r16
    1e2e:	b1 07       	cpc	r27, r17
    1e30:	48 f0       	brcs	.+18     	; 0x1e44 <__udivmod64+0x6c>
    1e32:	8a 18       	sub	r8, r10
    1e34:	9b 08       	sbc	r9, r11
    1e36:	ec 09       	sbc	r30, r12
    1e38:	fd 09       	sbc	r31, r13
    1e3a:	ce 09       	sbc	r28, r14
    1e3c:	df 09       	sbc	r29, r15
    1e3e:	a0 0b       	sbc	r26, r16
    1e40:	b1 0b       	sbc	r27, r17
    1e42:	21 60       	ori	r18, 0x01	; 1
    1e44:	1a 94       	dec	r1
    1e46:	e1 f6       	brne	.-72     	; 0x1e00 <__udivmod64+0x28>
    1e48:	2e f4       	brtc	.+10     	; 0x1e54 <__udivmod64+0x7c>
    1e4a:	94 01       	movw	r18, r8
    1e4c:	af 01       	movw	r20, r30
    1e4e:	be 01       	movw	r22, r28
    1e50:	cd 01       	movw	r24, r26
    1e52:	00 0c       	add	r0, r0
    1e54:	08 95       	ret

00001e56 <__ashldi3>:
    1e56:	0f 93       	push	r16
    1e58:	0f 73       	andi	r16, 0x3F	; 63
    1e5a:	51 f0       	breq	.+20     	; 0x1e70 <__ashldi3+0x1a>
    1e5c:	22 0f       	add	r18, r18
    1e5e:	33 1f       	adc	r19, r19
    1e60:	44 1f       	adc	r20, r20
    1e62:	55 1f       	adc	r21, r21
    1e64:	66 1f       	adc	r22, r22
    1e66:	77 1f       	adc	r23, r23
    1e68:	88 1f       	adc	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 95       	dec	r16
    1e6e:	b1 f7       	brne	.-20     	; 0x1e5c <__ashldi3+0x6>
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret

00001e74 <__lshrdi3>:
    1e74:	0f 93       	push	r16
    1e76:	0f 73       	andi	r16, 0x3F	; 63
    1e78:	51 f0       	breq	.+20     	; 0x1e8e <__lshrdi3+0x1a>
    1e7a:	96 95       	lsr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	77 95       	ror	r23
    1e80:	67 95       	ror	r22
    1e82:	57 95       	ror	r21
    1e84:	47 95       	ror	r20
    1e86:	37 95       	ror	r19
    1e88:	27 95       	ror	r18
    1e8a:	0a 95       	dec	r16
    1e8c:	b1 f7       	brne	.-20     	; 0x1e7a <__lshrdi3+0x6>
    1e8e:	0f 91       	pop	r16
    1e90:	08 95       	ret

00001e92 <__adddi3_s8>:
    1e92:	00 24       	eor	r0, r0
    1e94:	a7 fd       	sbrc	r26, 7
    1e96:	00 94       	com	r0
    1e98:	2a 0f       	add	r18, r26
    1e9a:	30 1d       	adc	r19, r0
    1e9c:	40 1d       	adc	r20, r0
    1e9e:	50 1d       	adc	r21, r0
    1ea0:	60 1d       	adc	r22, r0
    1ea2:	70 1d       	adc	r23, r0
    1ea4:	80 1d       	adc	r24, r0
    1ea6:	90 1d       	adc	r25, r0
    1ea8:	08 95       	ret

00001eaa <__subdi3>:
    1eaa:	2a 19       	sub	r18, r10
    1eac:	3b 09       	sbc	r19, r11
    1eae:	4c 09       	sbc	r20, r12
    1eb0:	5d 09       	sbc	r21, r13
    1eb2:	6e 09       	sbc	r22, r14
    1eb4:	7f 09       	sbc	r23, r15
    1eb6:	80 0b       	sbc	r24, r16
    1eb8:	91 0b       	sbc	r25, r17
    1eba:	08 95       	ret

00001ebc <__cmpdi2_s8>:
    1ebc:	00 24       	eor	r0, r0
    1ebe:	a7 fd       	sbrc	r26, 7
    1ec0:	00 94       	com	r0
    1ec2:	2a 17       	cp	r18, r26
    1ec4:	30 05       	cpc	r19, r0
    1ec6:	40 05       	cpc	r20, r0
    1ec8:	50 05       	cpc	r21, r0
    1eca:	60 05       	cpc	r22, r0
    1ecc:	70 05       	cpc	r23, r0
    1ece:	80 05       	cpc	r24, r0
    1ed0:	90 05       	cpc	r25, r0
    1ed2:	08 95       	ret

00001ed4 <__udivmodqi4>:
    1ed4:	99 1b       	sub	r25, r25
    1ed6:	79 e0       	ldi	r23, 0x09	; 9
    1ed8:	04 c0       	rjmp	.+8      	; 0x1ee2 <__udivmodqi4_ep>

00001eda <__udivmodqi4_loop>:
    1eda:	99 1f       	adc	r25, r25
    1edc:	96 17       	cp	r25, r22
    1ede:	08 f0       	brcs	.+2      	; 0x1ee2 <__udivmodqi4_ep>
    1ee0:	96 1b       	sub	r25, r22

00001ee2 <__udivmodqi4_ep>:
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	7a 95       	dec	r23
    1ee6:	c9 f7       	brne	.-14     	; 0x1eda <__udivmodqi4_loop>
    1ee8:	80 95       	com	r24
    1eea:	08 95       	ret

00001eec <__udivmodhi4>:
    1eec:	aa 1b       	sub	r26, r26
    1eee:	bb 1b       	sub	r27, r27
    1ef0:	51 e1       	ldi	r21, 0x11	; 17
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <__udivmodhi4_ep>

00001ef4 <__udivmodhi4_loop>:
    1ef4:	aa 1f       	adc	r26, r26
    1ef6:	bb 1f       	adc	r27, r27
    1ef8:	a6 17       	cp	r26, r22
    1efa:	b7 07       	cpc	r27, r23
    1efc:	10 f0       	brcs	.+4      	; 0x1f02 <__udivmodhi4_ep>
    1efe:	a6 1b       	sub	r26, r22
    1f00:	b7 0b       	sbc	r27, r23

00001f02 <__udivmodhi4_ep>:
    1f02:	88 1f       	adc	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	5a 95       	dec	r21
    1f08:	a9 f7       	brne	.-22     	; 0x1ef4 <__udivmodhi4_loop>
    1f0a:	80 95       	com	r24
    1f0c:	90 95       	com	r25
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	08 95       	ret

00001f14 <__udivmodsi4>:
    1f14:	a1 e2       	ldi	r26, 0x21	; 33
    1f16:	1a 2e       	mov	r1, r26
    1f18:	aa 1b       	sub	r26, r26
    1f1a:	bb 1b       	sub	r27, r27
    1f1c:	fd 01       	movw	r30, r26
    1f1e:	0d c0       	rjmp	.+26     	; 0x1f3a <__udivmodsi4_ep>

00001f20 <__udivmodsi4_loop>:
    1f20:	aa 1f       	adc	r26, r26
    1f22:	bb 1f       	adc	r27, r27
    1f24:	ee 1f       	adc	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	a2 17       	cp	r26, r18
    1f2a:	b3 07       	cpc	r27, r19
    1f2c:	e4 07       	cpc	r30, r20
    1f2e:	f5 07       	cpc	r31, r21
    1f30:	20 f0       	brcs	.+8      	; 0x1f3a <__udivmodsi4_ep>
    1f32:	a2 1b       	sub	r26, r18
    1f34:	b3 0b       	sbc	r27, r19
    1f36:	e4 0b       	sbc	r30, r20
    1f38:	f5 0b       	sbc	r31, r21

00001f3a <__udivmodsi4_ep>:
    1f3a:	66 1f       	adc	r22, r22
    1f3c:	77 1f       	adc	r23, r23
    1f3e:	88 1f       	adc	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	1a 94       	dec	r1
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <__udivmodsi4_loop>
    1f46:	60 95       	com	r22
    1f48:	70 95       	com	r23
    1f4a:	80 95       	com	r24
    1f4c:	90 95       	com	r25
    1f4e:	9b 01       	movw	r18, r22
    1f50:	ac 01       	movw	r20, r24
    1f52:	bd 01       	movw	r22, r26
    1f54:	cf 01       	movw	r24, r30
    1f56:	08 95       	ret

00001f58 <__tablejump2__>:
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31

00001f5c <__tablejump__>:
    1f5c:	05 90       	lpm	r0, Z+
    1f5e:	f4 91       	lpm	r31, Z
    1f60:	e0 2d       	mov	r30, r0
    1f62:	09 94       	ijmp

00001f64 <_exit>:
    1f64:	f8 94       	cli

00001f66 <__stop_program>:
    1f66:	ff cf       	rjmp	.-2      	; 0x1f66 <__stop_program>
